[{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"objectId","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/objectId","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"DataType.float64","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/float64","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Provide updates to the document by changing your model object within the provided closure.  Return Value A change request to send to other collaborators, nil if the model wasn’t updated. An optional message describing the change or reasons for the change. The change message isn’t interpreted by Automerge, and is saved in the change history. A closure that provides a proxy of the current instance of your model to update. Discussion The optional message argument allows you to include a string describing the change, not interpreted by Automerge, and saved in the change history.  Within the closure provided by this method, use set to update a value, or set a nil value to remove a property. All primitive data types are supported, as well as arrays. ","kind":"symbol","title":"change(message:_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/change(message:_:)","interfaceLanguage":"swift"}},"summary":"Provide updates to the document by changing your model object within the provided closure."},{"rawIndexableTextContent":"Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.  A closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again. Discussion O(n), where n is the length of the collection.","kind":"symbol","title":"drop(while:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/drop(while:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."},{"rawIndexableTextContent":"A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily. ","kind":"symbol","title":"lazy","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/lazy","interfaceLanguage":"swift"}},"summary":"A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."},{"rawIndexableTextContent":"The identity of the collaborator responsible for this document. ","kind":"symbol","title":"actor","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/actor","interfaceLanguage":"swift"}},"summary":"The identity of the collaborator responsible for this document."},{"rawIndexableTextContent":"Returns the result of combining the elements of the sequence using the given closure.  Return Value The final accumulated value. If the sequence has no elements, the result is initialResult. The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed. A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller. Discussion Use the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product. The nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.  When numbers.reduce(_:_:) is called, the following steps occur: The nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1. The closure is called again repeatedly with the previous call’s return value and each element of the sequence. When the sequence is exhausted, the last value returned from the closure is returned to the caller. If the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:). O(n), where n is the length of the sequence.","kind":"symbol","title":"reduce(_:_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/reduce(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns the result of combining the elements of the sequence using the given closure."},{"rawIndexableTextContent":"Decrements the counter by the value you provide.  The amount to decrement the counter, defaults to 1.","kind":"symbol","title":"decrement(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/decrement(_:)","interfaceLanguage":"swift"}},"summary":"Decrements the counter by the value you provide."},{"rawIndexableTextContent":"Returns the elements of the sequence, shuffled using the given generator as a source for randomness.  Return Value An array of this sequence’s elements in a shuffled order. The random number generator to use when shuffling the sequence. Discussion You use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:  O(n), where n is the length of the sequence. The algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.","kind":"symbol","title":"shuffled(using:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/shuffled(using:)","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, shuffled using the given generator as a source for randomness."},{"rawIndexableTextContent":"Returns the current instance of your document’s model. ","kind":"symbol","title":"get()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/get()","interfaceLanguage":"swift"}},"summary":"Returns the current instance of your document’s model."},{"rawIndexableTextContent":"A struct that represents a change to an Automerge document. ","kind":"symbol","title":"Change","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Change","interfaceLanguage":"swift"}},"summary":"A struct that represents a change to an Automerge document."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a byte buffer that represents the change history of the document  Return Value An encoded change history of the document.","kind":"symbol","title":"save()","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/save()","interfaceLanguage":"swift"}},"summary":"Returns a byte buffer that represents the change history of the document"},{"rawIndexableTextContent":"Returns the elements of the sequence, shuffled.  Return Value A shuffled array of this sequence’s elements. Discussion For example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:  This method is equivalent to calling shuffled(using:), passing in the system’s default random generator. O(n), where n is the length of the sequence.","kind":"symbol","title":"shuffled()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/shuffled()","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, shuffled."},{"rawIndexableTextContent":"The value of the counter. ","kind":"symbol","title":"value","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Counter\/value","interfaceLanguage":"swift"}},"summary":"The value of the counter."},{"rawIndexableTextContent":"Returns a partial range extending upward from a lower bound.  The lower bound for the range. Discussion Use the postfix range operator (postfix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeFrom<Double> instance that includes any value greater than or equal to 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the partial range’s lower bound up to the end of the collection.  minimum must compare equal to itself (i.e. cannot be NaN).","kind":"symbol","title":"...(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/...(_:)-48262","interfaceLanguage":"swift"}},"summary":"Returns a partial range extending upward from a lower bound."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"hash(into:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/hash(into:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"subscript(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/subscript(_:)-6soom","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the index of the last element in the collection that matches the given predicate.  Return Value The index of the last element in the collection that matches predicate, or nil if no elements match. A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match. Discussion You can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. This example finds the index of the last name that begins with the letter A:  O(n), where n is the length of the collection.","kind":"symbol","title":"lastIndex(where:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/lastIndex(where:)","interfaceLanguage":"swift"}},"summary":"Returns the index of the last element in the collection that matches the given predicate."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.  Return Value true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true. A sequence to compare to this sequence. A predicate that returns true if its two arguments are equivalent; otherwise, false. Discussion The predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold: areEquivalent(a, a) is always true. (Reflexivity) areEquivalent(a, b) implies areEquivalent(b, a). (Symmetry) If areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity) O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.","kind":"symbol","title":"starts(with:by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/starts(with:by:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."},{"rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.  Return Value A sorted array of the sequence’s elements. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion When you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate. In the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.  You also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.  Calling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.  The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) The sorting algorithm is not guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order. O(n log n), where n is the length of the sequence.","kind":"symbol","title":"sorted(by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/sorted(by:)","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"value","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/value","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"pred","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/pred","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Inserts a character at the index location you provide for the text model.  The character to insert. The location to insert the character.","kind":"symbol","title":"insert(_:at:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/insert(_:at:)-64k5z","interfaceLanguage":"swift"}},"summary":"Inserts a character at the index location you provide for the text model."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/ExpressibleByExtendedGraphemeClusterLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a counter from the string representation provided.  The string representation of the counter.","kind":"symbol","title":"init(integerLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Counter\/init(integerLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates a counter from the string representation provided."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a partial range extending upward from a lower bound.  The lower bound for the range. Discussion Use the postfix range operator (postfix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeFrom<Double> instance that includes any value greater than or equal to 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the partial range’s lower bound up to the end of the collection.  minimum must compare equal to itself (i.e. cannot be NaN).","kind":"symbol","title":"...(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/...(_:)-1qewv","interfaceLanguage":"swift"}},"summary":"Returns a partial range extending upward from a lower bound."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByStringLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/ExpressibleByStringLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"DataType.uint","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/uint","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.  A value to compare. Another value to compare. Discussion This is the default implementation of the less-than-or-equal-to operator (<=) for any type that conforms to Comparable.","kind":"symbol","title":"<=(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/_=(_:_:)-88hsh","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."},{"rawIndexableTextContent":"A value less than or equal to the number of elements in the sequence, calculated nondestructively.  Discussion The default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively. O(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount.","kind":"symbol","title":"underestimatedCount","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/underestimatedCount","interfaceLanguage":"swift"}},"summary":"A value less than or equal to the number of elements in the sequence, calculated nondestructively."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.  Return Value true if the sequence contains an element that satisfies predicate; otherwise, false. A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match. Discussion You can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.  Alternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.  O(n), where n is the length of the sequence.","kind":"symbol","title":"contains(where:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/contains(where:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."},{"rawIndexableTextContent":"Returns a subsequence from the start of the collection up to, but not including, the specified position.  Return Value A subsequence up to, but not including, the end position. The “past the end” index of the resulting subsequence. end must be a valid index of the collection. Discussion The resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:  Passing the collection’s starting index as the end parameter results in an empty subsequence.  Using the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).  O(1)","kind":"symbol","title":"prefix(upTo:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/prefix(upTo:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence from the start of the collection up to, but not including, the specified position."},{"rawIndexableTextContent":"Accesses the element at the specified position.  The position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property. Overview For example, you can replace an element of an array by using its subscript.  You can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element. O(1)","kind":"symbol","title":"subscript(_:)","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/subscript(_:)-xhb2","interfaceLanguage":"swift"}},"summary":"Accesses the element at the specified position."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"Primitive.bool(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/bool(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The type of the element of the collection. ","kind":"symbol","title":"Proxy.Element","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/Element","interfaceLanguage":"swift"}},"summary":"The type of the element of the collection."},{"rawIndexableTextContent":"Returns the maximum element in the sequence, using the given predicate as the comparison between elements.  Return Value The sequence’s maximum element if the sequence is not empty; otherwise, nil. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.  O(n), where n is the length of the sequence.","kind":"symbol","title":"max(by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/max(by:)","interfaceLanguage":"swift"}},"summary":"Returns the maximum element in the sequence, using the given predicate as the comparison between elements."},{"rawIndexableTextContent":"Returns a sequence containing all but the given number of final elements.  Return Value A sequence leaving off the specified number of elements. The number of elements to drop off the end of the sequence. n must be greater than or equal to zero. Discussion The sequence must be finite. If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.  O(n), where n is the length of the sequence.","kind":"symbol","title":"dropLast(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/dropLast(_:)","interfaceLanguage":"swift"}},"summary":"Returns a sequence containing all but the given number of final elements."},{"rawIndexableTextContent":"Returns a row for a table with the object ID you provide.  Return Value Returns the row, or nil if the ObjectId you provided doesn’t exist. The ObjectId of the row.","kind":"symbol","title":"row(by:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/row(by:)","interfaceLanguage":"swift"}},"summary":"Returns a row for a table with the object ID you provide."},{"rawIndexableTextContent":"Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.  Return Value A subsequence starting at the beginning of this collection with at most maxLength elements. The maximum number of elements to return. maxLength must be greater than or equal to zero. Discussion If the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection.","kind":"symbol","title":"prefix(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/prefix(_:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."},{"rawIndexableTextContent":"Offsets the given index by the specified distance.  A valid index of the collection. The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol. Discussion The value passed as distance must not offset i beyond the bounds of the collection. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.","kind":"symbol","title":"formIndex(_:offsetBy:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/formIndex(_:offsetBy:)","interfaceLanguage":"swift"}},"summary":"Offsets the given index by the specified distance."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByStringInterpolation Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/ExpressibleByStringInterpolation-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"subscript(dynamicMember:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/subscript(dynamicMember:)-9yyo1","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.  Return Value true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false. A sequence to compare to this sequence. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode.  If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead. O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol","title":"lexicographicallyPrecedes(_:by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/lexicographicallyPrecedes(_:by:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."},{"rawIndexableTextContent":"Accesses the contiguous subrange of the collection’s elements specified by a range expression.  A range of the collection’s indices. The bounds of the range must be valid indices of the collection. Overview The range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.  The accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.  Always use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.  O(1)","kind":"symbol","title":"subscript(_:)","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/subscript(_:)-2v6w8","interfaceLanguage":"swift"}},"summary":"Accesses the contiguous subrange of the collection’s elements specified by a range expression."},{"rawIndexableTextContent":"Calls the given closure on each element in the sequence in the same order as a for-in loop.  A closure that takes an element of the sequence as a parameter. Discussion The two loops in the following example produce the same output:  Using the forEach method is distinct from a for-in loop in two important ways: You cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls. Using the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls.","kind":"symbol","title":"forEach(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/forEach(_:)","interfaceLanguage":"swift"}},"summary":"Calls the given closure on each element in the sequence in the same order as a for-in loop."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByStringLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/ExpressibleByStringLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"hashValue","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/hashValue","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.  Return Value A subsequence starting at the beginning of this collection with at most maxLength elements. The maximum number of elements to return. maxLength must be greater than or equal to zero. Discussion If the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection.","kind":"symbol","title":"prefix(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/prefix(_:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByStringInterpolation Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/ExpressibleByStringInterpolation-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.  Return Value true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true. A sequence to compare to this sequence. Discussion This example tests whether one countable range begins with the elements of another countable range.  Passing a sequence with no elements or an empty collection as possiblePrefix always results in true.  O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.","kind":"symbol","title":"starts(with:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/starts(with:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."},{"rawIndexableTextContent":"Returns an array containing the results of mapping the given closure over the sequence’s elements.  Return Value An array containing the transformed elements of this sequence. A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. Discussion In this example, map is used first to convert the names in the array to lowercase strings and then to count their characters. ","kind":"symbol","title":"map(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/map(_:)-2983p","interfaceLanguage":"swift"}},"summary":"Returns an array containing the results of mapping the given closure over the sequence’s elements."},{"rawIndexableTextContent":"Creates a new document from the encoded list of changes.  A list of byte buffers that represent the changes to the model. The identity of the collaborator that owns this document.","kind":"symbol","title":"init(changes:actor:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/init(changes:actor:)","interfaceLanguage":"swift"}},"summary":"Creates a new document from the encoded list of changes."},{"rawIndexableTextContent":"Returns a sequence containing the initial, consecutive elements that satisfy the given predicate.  Return Value A sequence of the initial, consecutive elements that satisfy predicate. A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result. Discussion The following example uses the prefix(while:) method to find the positive numbers at the beginning of the numbers array. Every element of numbers up to, but not including, the first negative value is included in the result.  If predicate matches every element in the sequence, the resulting sequence contains every element of the sequence. O(k), where k is the length of the result.","kind":"symbol","title":"prefix(while:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/prefix(while:)","interfaceLanguage":"swift"}},"summary":"Returns a sequence containing the initial, consecutive elements that satisfy the given predicate."},{"rawIndexableTextContent":"The change associated with this point in time within the change history of a document. ","kind":"symbol","title":"change","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Commit\/change","interfaceLanguage":"swift"}},"summary":"The change associated with this point in time within the change history of a document."},{"rawIndexableTextContent":"Returns a subsequence containing all but the given number of initial elements.  Return Value A subsequence starting after the specified number of elements. The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero. Discussion If the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection.","kind":"symbol","title":"dropFirst(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/dropFirst(_:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence containing all but the given number of initial elements."},{"rawIndexableTextContent":"Returns a closed range that contains both of its bounds.  The lower bound for the range. The upper bound for the range. Discussion Use the closed range operator (...) to create a closed range of any type that conforms to the Comparable protocol. This example creates a ClosedRange<Character> from “a” up to, and including, “z”.  minimum <= maximum.","kind":"symbol","title":"...(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/...(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns a closed range that contains both of its bounds."},{"rawIndexableTextContent":"Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.  Return Value A sequence of pairs enumerating the sequence. Discussion This example enumerates the characters of the string “Swift” and prints each character along with its place in the string.  When you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function. This example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.  Now that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.  O(1)","kind":"symbol","title":"enumerated()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/enumerated()","interfaceLanguage":"swift"}},"summary":"Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."},{"rawIndexableTextContent":"Creates a new instance from an interpolated string literal.  Discussion Don’t call this initializer directly. It’s used by the compiler when you create a string using string interpolation. Instead, use string interpolation to create a new string by including values, literals, variables, or expressions enclosed in parentheses, prefixed by a backslash (\\(…)). ","kind":"symbol","title":"init(stringInterpolation:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/init(stringInterpolation:)","interfaceLanguage":"swift"}},"summary":"Creates a new instance from an interpolated string literal."},{"rawIndexableTextContent":"Creates a new counter with the value you provide.  The value for the counter.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Counter\/init(_:)","interfaceLanguage":"swift"}},"summary":"Creates a new counter with the value you provide."},{"rawIndexableTextContent":"Call body(p), where p is a pointer to the collection’s contiguous storage.  If no such storage exists, it is first created.  If the collection does not support an internal representation in a form of contiguous storage, body is not called and nil is returned.  Discussion A Collection that provides its own implementation of this method must also guarantee that an equivalent buffer of its SubSequence can be generated by advancing the pointer by the distance to the slice’s startIndex.","kind":"symbol","title":"withContiguousStorageIfAvailable(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/withContiguousStorageIfAvailable(_:)","interfaceLanguage":"swift"}},"summary":"Call body(p), where p is a pointer to the collection’s contiguous storage.  If no such storage exists, it is first created.  If the collection does not support an internal representation in a form of contiguous storage, body is not called and nil is returned."},{"rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given array of SortComparators to compare elements.  Return Value an array of the elements sorted using comparators. an array of comparators used to compare elements. The first comparator specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values.","kind":"symbol","title":"sorted(using:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/sorted(using:)-44f5a","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, sorted using the given array of SortComparators to compare elements."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"publisher","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/publisher","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":" Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Request\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"A data structure that represents a row within a table. ","kind":"symbol","title":"Table.Row","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/Row","interfaceLanguage":"swift"}},"summary":"A data structure that represents a row within a table."},{"rawIndexableTextContent":"Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.  Return Value An array of the non-nil results of calling transform with each element of the sequence. A closure that accepts an element of this sequence as its argument and returns an optional value. Discussion Use this method to receive an array of non-optional values when your transformation produces an optional value. In this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.  O(m + n), where n is the length of this sequence and m is the length of the result.","kind":"symbol","title":"compactMap(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/compactMap(_:)","interfaceLanguage":"swift"}},"summary":"Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"action","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/action","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.  Return Value A sequence starting after the initial, consecutive elements that satisfy predicate. A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result. Discussion The following example uses the drop(while:) method to skip over the positive numbers at the beginning of the numbers array. The result begins with the first element of numbers that does not satisfy predicate.  If predicate matches every element in the sequence, the result is an empty sequence. O(k), where k is the number of elements to drop from the beginning of the sequence.","kind":"symbol","title":"drop(while:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/drop(while:)","interfaceLanguage":"swift"}},"summary":"Returns a sequence by skipping the initial, consecutive elements that satisfy the given predicate."},{"rawIndexableTextContent":"Returns the list of missing dependencies. ","kind":"symbol","title":"getMissingsDeps()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/getMissingsDeps()","interfaceLanguage":"swift"}},"summary":"Returns the list of missing dependencies."},{"rawIndexableTextContent":"A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily. ","kind":"symbol","title":"lazy","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/lazy","interfaceLanguage":"swift"}},"summary":"A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"applyLocalChange(request:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend\/applyLocalChange(request:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.  Return Value true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true. A sequence to compare to this sequence. A predicate that returns true if its two arguments are equivalent; otherwise, false. Discussion The predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold: areEquivalent(a, a) is always true. (Reflexivity) areEquivalent(a, b) implies areEquivalent(b, a). (Symmetry) If areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity) O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.","kind":"symbol","title":"starts(with:by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/starts(with:by:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."},{"rawIndexableTextContent":"Creates a new Text data structure with the content you provide.  The initial text contents.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/init(_:)","interfaceLanguage":"swift"}},"summary":"Creates a new Text data structure with the content you provide."},{"rawIndexableTextContent":"The set of primitive types, and their associated values, for internal primitive types that Automerge represents. ","kind":"symbol","title":"Primitive","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive","interfaceLanguage":"swift"}},"summary":"The set of primitive types, and their associated values, for internal primitive types that Automerge represents."},{"rawIndexableTextContent":"Calls the given closure on each element in the sequence in the same order as a for-in loop.  A closure that takes an element of the sequence as a parameter. Discussion The two loops in the following example produce the same output:  Using the forEach method is distinct from a for-in loop in two important ways: You cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls. Using the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls.","kind":"symbol","title":"forEach(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/forEach(_:)","interfaceLanguage":"swift"}},"summary":"Calls the given closure on each element in the sequence in the same order as a for-in loop."},{"rawIndexableTextContent":"Returns a half-open range that contains its lower bound but not its upper bound.  The lower bound for the range. The upper bound for the range. Discussion Use the half-open range operator (..<) to create a range of any type that conforms to the Comparable protocol. This example creates a Range<Double> from zero up to, but not including, 5.0.  minimum <= maximum.","kind":"symbol","title":"..<(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/.._(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns a half-open range that contains its lower bound but not its upper bound."},{"rawIndexableTextContent":"An operation that sets a value. ","kind":"symbol","title":"OpAction.set","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/set","interfaceLanguage":"swift"}},"summary":"An operation that sets a value."},{"rawIndexableTextContent":"Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.  Return Value An array of subsequences, split from this collection’s elements. The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max. If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true. A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element. Discussion The resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence. The following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.  The second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.  The final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.  O(n), where n is the length of the collection.","kind":"symbol","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"}},"summary":"Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."},{"rawIndexableTextContent":"Returns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.  Return Value An array of subsequences, split from this sequence’s elements. The maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max. If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the sequence satisfying the isSeparator predicate. If true, only nonempty subsequences are returned. The default value is true. A closure that returns true if its argument should be used to split the sequence; otherwise, false. Discussion The following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.  The second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.  The final example passes true for the allowEmptySlices parameter, so the returned array contains empty strings where spaces were repeated.  O(n), where n is the length of the sequence.","kind":"symbol","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"}},"summary":"Returns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"formatted(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/formatted(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"subscript(dynamicMember:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/subscript(dynamicMember:)-8n8lz","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"insert","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/insert","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.  Return Value true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false. A sequence to compare to this sequence. A predicate that returns true if its two arguments are equivalent; otherwise, false. Discussion At least one of the sequences must be finite. The predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold: areEquivalent(a, a) is always true. (Reflexivity) areEquivalent(a, b) implies areEquivalent(b, a). (Symmetry) If areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity) O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol","title":"elementsEqual(_:by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/elementsEqual(_:by:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates an instance initialized to the given value.  The value of the new instance.","kind":"symbol","title":"init(extendedGraphemeClusterLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/init(extendedGraphemeClusterLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given value."},{"rawIndexableTextContent":"Returns an array containing the results of mapping the given closure over the sequence’s elements.  Return Value An array containing the transformed elements of this sequence. A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. Discussion In this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.  O(n), where n is the length of the sequence.","kind":"symbol","title":"map(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/map(_:)-1qytp","interfaceLanguage":"swift"}},"summary":"Returns an array containing the results of mapping the given closure over the sequence’s elements."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"Primitive.string(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/string(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The kind of operation that Automerge performs to maintain the state of a Document. ","kind":"symbol","title":"OpAction","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction","interfaceLanguage":"swift"}},"summary":"The kind of operation that Automerge performs to maintain the state of a Document."},{"rawIndexableTextContent":"A Boolean value indicating whether the collection is empty.  Discussion When you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.  O(1)","kind":"symbol","title":"isEmpty","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/isEmpty","interfaceLanguage":"swift"}},"summary":"A Boolean value indicating whether the collection is empty."},{"rawIndexableTextContent":"Returns an iterator over the elements of the collection. ","kind":"symbol","title":"makeIterator()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/makeIterator()","interfaceLanguage":"swift"}},"summary":"Returns an iterator over the elements of the collection."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"key","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/key","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.  Return Value A sequence of pairs enumerating the sequence. Discussion This example enumerates the characters of the string “Swift” and prints each character along with its place in the string.  When you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function. This example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.  Now that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.  O(1)","kind":"symbol","title":"enumerated()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/enumerated()","interfaceLanguage":"swift"}},"summary":"Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."},{"rawIndexableTextContent":"Returns the first index where the specified value appears in the collection. ","kind":"symbol","title":"index(of:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/index(of:)","interfaceLanguage":"swift"}},"summary":"Returns the first index where the specified value appears in the collection."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"Request","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Request","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Inserts a string at the index location you provide.  The string to add. The index location of where to add the string.","kind":"symbol","title":"insert(_:at:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/insert(_:at:)","interfaceLanguage":"swift"}},"summary":"Inserts a string at the index location you provide."},{"rawIndexableTextContent":"Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.  Return Value An array of the elements that isIncluded allowed. A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array. Discussion In this example, filter(_:) is used to include only names shorter than five characters.  O(n), where n is the length of the sequence.","kind":"symbol","title":"filter(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/filter(_:)","interfaceLanguage":"swift"}},"summary":"Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Collection Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/Collection-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns an iterator over the elements of this sequence. ","kind":"symbol","title":"makeIterator()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/makeIterator()","interfaceLanguage":"swift"}},"summary":"Returns an iterator over the elements of this sequence."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"insert(_:at:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/insert(_:at:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"getHeads()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend\/getHeads()","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element.  Return Value An array of subsequences, split from this sequence’s elements. The element that should be split upon. The maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max. If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence. If true, only nonempty subsequences are returned. The default value is true. Discussion The resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence. The following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.  The second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.  The final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.  O(n), where n is the length of the sequence.","kind":"symbol","title":"split(separator:maxSplits:omittingEmptySubsequences:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/split(separator:maxSplits:omittingEmptySubsequences:)","interfaceLanguage":"swift"}},"summary":"Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element."},{"rawIndexableTextContent":"Creates a history of the provided Automerge document.  The document to inspect for the change history.","kind":"symbol","title":"init(document:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/init(document:)","interfaceLanguage":"swift"}},"summary":"Creates a history of the provided Automerge document."},{"rawIndexableTextContent":"Returns the position immediately after the given index.  Return Value The index value immediately after i. A valid index of the collection. i must be less than endIndex. Discussion The successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time.","kind":"symbol","title":"index(after:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/index(after:)","interfaceLanguage":"swift"}},"summary":"Returns the position immediately after the given index."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.  Return Value true if the sequence contains an element that satisfies predicate; otherwise, false. A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match. Discussion You can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.  Alternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.  O(n), where n is the length of the sequence.","kind":"symbol","title":"contains(where:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/contains(where:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."},{"rawIndexableTextContent":"Returns a partial range up to, and including, its upper bound.  The upper bound for the range. Discussion Use the prefix closed range operator (prefix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeThrough<Double> instance that includes any value less than or equal to 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, and including, the partial range’s upper bound.  maximum must compare equal to itself (i.e. cannot be NaN).","kind":"symbol","title":"...(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/...(_:)-2r4wg","interfaceLanguage":"swift"}},"summary":"Returns a partial range up to, and including, its upper bound."},{"rawIndexableTextContent":"Provides a proxy to the row in your table model associated with the id you provide.  Return Value An optional proxy to your row, nil if the provided Id isn’t associated with a row.","kind":"symbol","title":"row(by:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/row(by:)","interfaceLanguage":"swift"}},"summary":"Provides a proxy to the row in your table model associated with the id you provide."},{"rawIndexableTextContent":"Encodes this value into the given encoder, when the type’s RawValue is String.  The encoder to write data to. Discussion This function throws an error if any values are invalid for the given encoder’s format.","kind":"symbol","title":"encode(to:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this value into the given encoder, when the type’s RawValue is String."},{"rawIndexableTextContent":"Offsets the given index by the specified distance.  A valid index of the collection. The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol. Discussion The value passed as distance must not offset i beyond the bounds of the collection. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.","kind":"symbol","title":"formIndex(_:offsetBy:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/formIndex(_:offsetBy:)","interfaceLanguage":"swift"}},"summary":"Offsets the given index by the specified distance."},{"rawIndexableTextContent":"Calls the given closure on each element in the sequence in the same order as a for-in loop.  A closure that takes an element of the sequence as a parameter. Discussion The two loops in the following example produce the same output:  Using the forEach method is distinct from a for-in loop in two important ways: You cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls. Using the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls.","kind":"symbol","title":"forEach(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/forEach(_:)","interfaceLanguage":"swift"}},"summary":"Calls the given closure on each element in the sequence in the same order as a for-in loop."},{"rawIndexableTextContent":"Prepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type.  The requested number of elements to store. Discussion If you are adding a known number of elements to a collection, use this method to avoid multiple reallocations. A type that conforms to RangeReplaceableCollection can choose how to respond when this method is called. Depending on the type, it may make sense to allocate more or less storage than requested, or to take no action at all.","kind":"symbol","title":"reserveCapacity(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/reserveCapacity(_:)","interfaceLanguage":"swift"}},"summary":"Prepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"append(contentsOf:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/append(contentsOf:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The index location of the end of the Text data structure. ","kind":"symbol","title":"endIndex","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/endIndex","interfaceLanguage":"swift"}},"summary":"The index location of the end of the Text data structure."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"subscript(dynamicMember:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/AnyProxy\/subscript(dynamicMember:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates an instance initialized to the given value.  The value of the new instance.","kind":"symbol","title":"init(extendedGraphemeClusterLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/init(extendedGraphemeClusterLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given value."},{"rawIndexableTextContent":"Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.  Return Value The resulting flattened array. A closure that accepts an element of this sequence as its argument and returns a sequence or collection. Discussion Use this method to receive a single-level collection when your transformation produces a sequence or collection for each element. In this example, note the difference in the result of using map and flatMap with a transformation that returns an array.  In fact, s.flatMap(transform)  is equivalent to Array(s.map(transform).joined()). O(m + n), where n is the length of this sequence and m is the length of the result.","kind":"symbol","title":"flatMap(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/flatMap(_:)-90vug","interfaceLanguage":"swift"}},"summary":"Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."},{"rawIndexableTextContent":"The type to use for the index location in the collection. ","kind":"symbol","title":"MutableProxy.Index","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/Index","interfaceLanguage":"swift"}},"summary":"The type to use for the index location in the collection."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/Row\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the elements of the sequence, shuffled using the given generator as a source for randomness.  Return Value An array of this sequence’s elements in a shuffled order. The random number generator to use when shuffling the sequence. Discussion You use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:  O(n), where n is the length of the sequence. The algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.","kind":"symbol","title":"shuffled(using:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/shuffled(using:)","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, shuffled using the given generator as a source for randomness."},{"rawIndexableTextContent":"Creates a new, empty collection. ","kind":"symbol","title":"init()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/init()","interfaceLanguage":"swift"}},"summary":"Creates a new, empty collection."},{"rawIndexableTextContent":"A operation that deletes a value. ","kind":"symbol","title":"OpAction.del","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/del","interfaceLanguage":"swift"}},"summary":"A operation that deletes a value."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByUnicodeScalarLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/ExpressibleByUnicodeScalarLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"DataType","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a history of an Automerge document from the list binary changes that you provide.  An actor that represents the current collaborator viewing the changes. An array of byte buffers that represent the changes.","kind":"symbol","title":"init(actor:binaryChanges:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/init(actor:binaryChanges:)","interfaceLanguage":"swift"}},"summary":"Creates a history of an Automerge document from the list binary changes that you provide."},{"rawIndexableTextContent":"Returns a partial range up to, and including, its upper bound.  The upper bound for the range. Discussion Use the prefix closed range operator (prefix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeThrough<Double> instance that includes any value less than or equal to 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, and including, the partial range’s upper bound.  maximum must compare equal to itself (i.e. cannot be NaN).","kind":"symbol","title":"...(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/...(_:)-93nec","interfaceLanguage":"swift"}},"summary":"Returns a partial range up to, and including, its upper bound."},{"rawIndexableTextContent":"Returns a subsequence from the start of the collection up to, but not including, the specified position.  Return Value A subsequence up to, but not including, the end position. The “past the end” index of the resulting subsequence. end must be a valid index of the collection. Discussion The resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:  Passing the collection’s starting index as the end parameter results in an empty subsequence.  Using the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).  O(1)","kind":"symbol","title":"prefix(upTo:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/prefix(upTo:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence from the start of the collection up to, but not including, the specified position."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"obj","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/obj","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a new instance by decoding from the given decoder.  The decoder to read data from. Discussion This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.","kind":"symbol","title":"init(from:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new instance by decoding from the given decoder."},{"rawIndexableTextContent":"Returns an array containing the results of mapping the given closure over the sequence’s elements.  Return Value An array containing the transformed elements of this sequence. A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. Discussion In this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.  O(n), where n is the length of the sequence.","kind":"symbol","title":"map(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/map(_:)-5acjh","interfaceLanguage":"swift"}},"summary":"Returns an array containing the results of mapping the given closure over the sequence’s elements."},{"rawIndexableTextContent":"Returns a subsequence containing all but the specified number of final elements.  Return Value A subsequence that leaves off the specified number of elements at the end. The number of elements to drop off the end of the collection. k must be greater than or equal to zero. Discussion If the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.","kind":"symbol","title":"dropLast(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/dropLast(_:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence containing all but the specified number of final elements."},{"rawIndexableTextContent":"Creates a new instance by decoding from the given decoder.  The decoder to read data from. Discussion This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.","kind":"symbol","title":"init(from:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new instance by decoding from the given decoder."},{"rawIndexableTextContent":"Updates the document by applying the provided patch.  A patch provided by a remote collaborator. Discussion The patch may be a result of a local change or a remote change. If it is the result of a local change, the seq field from  the change request should be included in the patch, so that the changes can be matched.","kind":"symbol","title":"applyPatch(patch:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/applyPatch(patch:)","interfaceLanguage":"swift"}},"summary":"Updates the document by applying the provided patch."},{"rawIndexableTextContent":"Returns the index location following the index location you provide.  An index location.","kind":"symbol","title":"index(after:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/index(after:)","interfaceLanguage":"swift"}},"summary":"Returns the index location following the index location you provide."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"flatMap(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/flatMap(_:)-fxd4","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Replaces the given index with its successor.  A valid index of the collection. i must be less than endIndex.","kind":"symbol","title":"formIndex(after:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/formIndex(after:)","interfaceLanguage":"swift"}},"summary":"Replaces the given index with its successor."},{"rawIndexableTextContent":"Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.  Return Value A sequence of pairs enumerating the sequence. Discussion This example enumerates the characters of the string “Swift” and prints each character along with its place in the string.  When you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function. This example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.  Now that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.  O(1)","kind":"symbol","title":"enumerated()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/enumerated()","interfaceLanguage":"swift"}},"summary":"Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence."},{"rawIndexableTextContent":"Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.  Return Value An array of the non-nil results of calling transform with each element of the sequence. A closure that accepts an element of this sequence as its argument and returns an optional value. Discussion Use this method to receive an array of non-optional values when your transformation produces an optional value. In this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.  O(m + n), where n is the length of this sequence and m is the length of the result.","kind":"symbol","title":"compactMap(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/compactMap(_:)","interfaceLanguage":"swift"}},"summary":"Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"getMissingDeps()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend\/getMissingDeps()","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Accesses a contiguous subrange of the collection’s elements.  A range of the collection’s indices. The bounds of the range must be valid indices of the collection. Overview The accessed slice uses the same indices for the same elements as the original collection. Always use the slice’s startIndex property instead of assuming that its indices start at a particular value. This example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.  O(1)","kind":"symbol","title":"subscript(_:)","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/subscript(_:)-3arvh","interfaceLanguage":"swift"}},"summary":"Accesses a contiguous subrange of the collection’s elements."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"publisher","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/publisher","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"elemId","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/elemId","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The wall clock timestamp of when this change was created. ","kind":"symbol","title":"timestamp","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Change\/timestamp","interfaceLanguage":"swift"}},"summary":"The wall clock timestamp of when this change was created."},{"rawIndexableTextContent":"Creates a new, empty row. ","kind":"symbol","title":"init()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/init()","interfaceLanguage":"swift"}},"summary":"Creates a new, empty row."},{"rawIndexableTextContent":"Returns the conflicts that Automerge has registered while it applied changes to your model.  Return Value An optional map keyed by the ObjectId with the conflicting change and the value that it proposed.","kind":"symbol","title":"conflicts(dynamicMember:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/conflicts(dynamicMember:)","interfaceLanguage":"swift"}},"summary":"Returns the conflicts that Automerge has registered while it applied changes to your model."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"index(_:offsetBy:limitedBy:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/index(_:offsetBy:limitedBy:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"subscript(dynamicMember:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/subscript(dynamicMember:)-505jf","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"A string that represents the Actor. ","kind":"symbol","title":"description","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/description","interfaceLanguage":"swift"}},"summary":"A string that represents the Actor."},{"rawIndexableTextContent":"Returns a subsequence containing all but the specified number of final elements.  Return Value A subsequence that leaves off k elements from the end. The number of elements to drop off the end of the collection. k must be greater than or equal to zero. Discussion If the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop.","kind":"symbol","title":"dropLast(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/dropLast(_:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence containing all but the specified number of final elements."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.  Return Value true if lhs is greater than or equal to rhs; otherwise, false. A value to compare. Another value to compare. Discussion This is the default implementation of the greater-than-or-equal-to operator (>=) for any type that conforms to Comparable.","kind":"symbol","title":">=(_:_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/_=(_:_:)-4iqcm","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."},{"rawIndexableTextContent":"Returns a collection of pairs (i, x), where i represents an index of the collection, and x represents an element.  Return Value A collection of paired indices and elements of this collection. Discussion This example iterates over the indices and elements of a set, building an array consisting of indices of names with five or fewer letters.  O(1)","kind":"symbol","title":"indexed()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/indexed()","interfaceLanguage":"swift"}},"summary":"Returns a collection of pairs (i, x), where i represents an index of the collection, and x represents an element."},{"rawIndexableTextContent":"Represents a collaborator that makes changes to a document.  Overview All changes to an automerge Document are identified by an Actor. Use the default constructor to craete a random collaborator identity.","kind":"symbol","title":"Actor","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor","interfaceLanguage":"swift"}},"summary":"Represents a collaborator that makes changes to a document."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"RangeReplaceableCollection Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/RangeReplaceableCollection-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a mutable proxy to a property in your model at the writable KeyPath you provide. ","kind":"symbol","title":"subscript(dynamicMember:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/subscript(dynamicMember:)-4p1lt","interfaceLanguage":"swift"}},"summary":"Returns a mutable proxy to a property in your model at the writable KeyPath you provide."},{"rawIndexableTextContent":"Creates a new instance from an interpolated string literal.  Discussion Don’t call this initializer directly. It’s used by the compiler when you create a string using string interpolation. Instead, use string interpolation to create a new string by including values, literals, variables, or expressions enclosed in parentheses, prefixed by a backslash (\\(…)). ","kind":"symbol","title":"init(stringInterpolation:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/init(stringInterpolation:)","interfaceLanguage":"swift"}},"summary":"Creates a new instance from an interpolated string literal."},{"rawIndexableTextContent":"Automerge helps you build collaborative applications by tracking changes and enabling consistent merging of those changes to your models. Overview Automerge is an implementation of CRDTs, that enables you define model objects, update them, and share changes between different instances that update that model. Automerge provides the serialization for the combined change history for models, but doesn’t provide any I\/O - saving to disk, or transfering content over a network. For an overview of Automerge, watch the November 2021 video Automerge: a new foundation for collaboration software.","kind":"symbol","title":"Automerge","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge","interfaceLanguage":"swift"}},"summary":"Automerge helps you build collaborative applications by tracking changes and enabling consistent merging of those changes to your models."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/ExpressibleByExtendedGraphemeClusterLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"CustomStringConvertible Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/CustomStringConvertible-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a subsequence from the start of the collection through the specified position.  Return Value A subsequence up to, and including, the end position. The index of the last element to include in the resulting subsequence. end must be a valid index of the collection that is not equal to the endIndex property. Discussion The resulting subsequence includes the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:  Using the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).  O(1)","kind":"symbol","title":"prefix(through:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/prefix(through:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence from the start of the collection through the specified position."},{"rawIndexableTextContent":"Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.  Return Value An index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil. A valid index of the collection. The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol. A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect. Discussion The following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position. The operation doesn’t require going beyond the limiting s.endIndex value, so it succeeds.  The next example attempts to retrieve an index six positions from s.startIndex but fails, because that distance is beyond the index passed as limit.  The value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.","kind":"symbol","title":"index(_:offsetBy:limitedBy:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/index(_:offsetBy:limitedBy:)","interfaceLanguage":"swift"}},"summary":"Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index."},{"rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given comparator to compare elements.  Return Value an array of the elements sorted using comparator. the comparator to use in ordering elements","kind":"symbol","title":"sorted(using:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/sorted(using:)-8uq7o","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, sorted using the given comparator to compare elements."},{"rawIndexableTextContent":"Creates an instance initialized with nil. ","kind":"symbol","title":"init(nilLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/init(nilLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized with nil."},{"rawIndexableTextContent":"A struct that wraps a document to represent it as a collection of changes.  Overview Each indexed position of the history collection provides a Commit that encapsulates a snapshot of your model at that change and a Change to represent the differences included within the commit.","kind":"symbol","title":"History","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History","interfaceLanguage":"swift"}},"summary":"A struct that wraps a document to represent it as a collection of changes."},{"rawIndexableTextContent":"Returns a partial range up to, but not including, its upper bound.  The upper bound for the range. Discussion Use the prefix half-open range operator (prefix ..<) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeUpTo<Double> instance that includes any value less than 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, but not including, the partial range’s upper bound.  maximum must compare equal to itself (i.e. cannot be NaN).","kind":"symbol","title":"..<(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/.._(_:)","interfaceLanguage":"swift"}},"summary":"Returns a partial range up to, but not including, its upper bound."},{"rawIndexableTextContent":"A set of the objectIds contained within the row. ","kind":"symbol","title":"ids","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/ids","interfaceLanguage":"swift"}},"summary":"A set of the objectIds contained within the row."},{"rawIndexableTextContent":"If lhs is ordered before rhs in the ordering described by the given sequence of SortComparators  Discussion The first element of the sequence of comparators specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values.","kind":"symbol","title":"compare(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/compare(_:_:)","interfaceLanguage":"swift"}},"summary":"If lhs is ordered before rhs in the ordering described by the given sequence of SortComparators"},{"rawIndexableTextContent":"A data structure that represents an individual commit within a document’s change history. ","kind":"symbol","title":"Commit","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Commit","interfaceLanguage":"swift"}},"summary":"A data structure that represents an individual commit within a document’s change history."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"A string that represents the Actor ","kind":"symbol","title":"actorId","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/actorId","interfaceLanguage":"swift"}},"summary":"A string that represents the Actor"},{"rawIndexableTextContent":"Creates an instance initialized to the given Boolean value.  The value of the new instance. Discussion Do not call this initializer directly. Instead, initialize a variable or constant using one of the Boolean literals true and false. For example:  In this example, the assignment to the twasBrillig constant calls this Boolean literal initializer behind the scenes.","kind":"symbol","title":"init(booleanLiteral:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/init(booleanLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given Boolean value."},{"rawIndexableTextContent":"Returns a subsequence from the specified position to the end of the collection.  Return Value A subsequence starting at the start position. The index at which to start the resulting subsequence. start must be a valid index of the collection. Discussion The following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:  Passing the collection’s endIndex as the start parameter results in an empty subsequence.  Using the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).  O(1)","kind":"symbol","title":"suffix(from:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/suffix(from:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence from the specified position to the end of the collection."},{"rawIndexableTextContent":"An operation that creates a Text object. ","kind":"symbol","title":"OpAction.makeText","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/makeText","interfaceLanguage":"swift"}},"summary":"An operation that creates a Text object."},{"rawIndexableTextContent":"Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.  A closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again. Discussion O(n), where n is the length of the collection.","kind":"symbol","title":"prefix(while:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/prefix(while:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."},{"rawIndexableTextContent":"Returns the elements of this sequence of sequences, concatenated.  Return Value A flattened view of the elements of this sequence of sequences. Discussion In this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn. ","kind":"symbol","title":"joined()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/joined()","interfaceLanguage":"swift"}},"summary":"Returns the elements of this sequence of sequences, concatenated."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"datatype","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/datatype","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"save()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend\/save()","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.  Return Value An array of the non-nil results of calling transform with each element of the sequence. A closure that accepts an element of this sequence as its argument and returns an optional value. Discussion Use this method to receive an array of non-optional values when your transformation produces an optional value. In this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.  O(m + n), where n is the length of this sequence and m is the length of the result.","kind":"symbol","title":"compactMap(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/compactMap(_:)","interfaceLanguage":"swift"}},"summary":"Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence contains the given element.  Return Value true if the element was found in the sequence; otherwise, false. The element to find in the sequence. Discussion This example checks to see whether a favorite actor is in an array storing a movie’s cast.  O(n), where n is the length of the sequence.","kind":"symbol","title":"contains(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/contains(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the sequence contains the given element."},{"rawIndexableTextContent":"Offsets the given index by the specified distance, or so that it equals the given limiting index.  Return Value true if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit. A valid index of the collection. The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol. A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect. Discussion The value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.","kind":"symbol","title":"formIndex(_:offsetBy:limitedBy:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/formIndex(_:offsetBy:limitedBy:)","interfaceLanguage":"swift"}},"summary":"Offsets the given index by the specified distance, or so that it equals the given limiting index."},{"rawIndexableTextContent":"A value less than or equal to the number of elements in the sequence, calculated nondestructively.  Discussion The default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively. O(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount.","kind":"symbol","title":"underestimatedCount","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/underestimatedCount-8pm67","interfaceLanguage":"swift"}},"summary":"A value less than or equal to the number of elements in the sequence, calculated nondestructively."},{"rawIndexableTextContent":"Creates an instance initialized to the given value.  The value of the new instance.","kind":"symbol","title":"init(extendedGraphemeClusterLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/init(extendedGraphemeClusterLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given value."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.  A value to compare. Another value to compare. Discussion This is the default implementation of the less-than-or-equal-to operator (<=) for any type that conforms to Comparable.","kind":"symbol","title":"<=(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/_=(_:_:)-5plrp","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."},{"rawIndexableTextContent":"Updates the document by applying the provided list of changes  A list of byte buffers that represent the changes to the document.","kind":"symbol","title":"apply(changes:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/apply(changes:)","interfaceLanguage":"swift"}},"summary":"Updates the document by applying the provided list of changes"},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Sequence Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/Sequence-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a subsequence containing all but the given number of initial elements.  Return Value A subsequence starting after the specified number of elements. The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero. Discussion If the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection.","kind":"symbol","title":"dropFirst(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/dropFirst(_:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence containing all but the given number of initial elements."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Encodes this value into the given encoder.  The encoder to write data to. Discussion If the value fails to encode anything, encoder will encode an empty keyed container in its place. This function throws an error if any values are invalid for the given encoder’s format.","kind":"symbol","title":"encode(to:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this value into the given encoder."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.  A value to compare. Another value to compare. Discussion This is the default implementation of the greater-than operator (>) for any type that conforms to Comparable.","kind":"symbol","title":">(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/_(_:_:)-7k14q","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.  Return Value true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false. A sequence to compare to this sequence. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode.  If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead. O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol","title":"lexicographicallyPrecedes(_:by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/lexicographicallyPrecedes(_:by:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"RawRepresentable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/RawRepresentable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The index location of the start of the Text data structure. ","kind":"symbol","title":"startIndex","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/startIndex","interfaceLanguage":"swift"}},"summary":"The index location of the start of the Text data structure."},{"rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.  Return Value A sorted array of the sequence’s elements. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion When you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate. In the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.  You also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.  Calling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.  The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) The sorting algorithm is not guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order. O(n log n), where n is the length of the sequence.","kind":"symbol","title":"sorted(by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/sorted(by:)","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."},{"rawIndexableTextContent":"Returns a half-open range that contains its lower bound but not its upper bound.  The lower bound for the range. The upper bound for the range. Discussion Use the half-open range operator (..<) to create a range of any type that conforms to the Comparable protocol. This example creates a Range<Double> from zero up to, but not including, 5.0.  minimum <= maximum.","kind":"symbol","title":"..<(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/.._(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns a half-open range that contains its lower bound but not its upper bound."},{"rawIndexableTextContent":"A type-erased wrapper around your model. ","kind":"symbol","title":"AnyProxy","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/AnyProxy","interfaceLanguage":"swift"}},"summary":"A type-erased wrapper around your model."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"publisher","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/publisher","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/ExpressibleByExtendedGraphemeClusterLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"replaceSubrange(_:with:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/replaceSubrange(_:with:)-5hgbx","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/ExpressibleByExtendedGraphemeClusterLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a subsequence, up to the given maximum length, containing the final elements of the collection.  Return Value A subsequence terminating at the end of the collection with at most maxLength elements. The maximum number of elements to return. maxLength must be greater than or equal to zero. Discussion If the maximum length exceeds the number of elements in the collection, the result contains the entire collection.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is equal to maxLength.","kind":"symbol","title":"suffix(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/suffix(_:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence, up to the given maximum length, containing the final elements of the collection."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"remove(at:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/remove(at:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a partial range up to, but not including, its upper bound.  The upper bound for the range. Discussion Use the prefix half-open range operator (prefix ..<) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeUpTo<Double> instance that includes any value less than 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, but not including, the partial range’s upper bound.  maximum must compare equal to itself (i.e. cannot be NaN).","kind":"symbol","title":"..<(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/.._(_:)","interfaceLanguage":"swift"}},"summary":"Returns a partial range up to, but not including, its upper bound."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"Key.index(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/index(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"init(data:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend\/init(data:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a new Actor from the provided string literal description.  The string that represents the actor.","kind":"symbol","title":"init(stringLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/init(stringLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates a new Actor from the provided string literal description."},{"rawIndexableTextContent":"Creates a new document with the provided instance of a model.  The initial state of a collaborative model. The identity of the collaborator that owns this document.","kind":"symbol","title":"init(_:actor:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/init(_:actor:)","interfaceLanguage":"swift"}},"summary":"Creates a new document with the provided instance of a model."},{"rawIndexableTextContent":"Returns the elements of the sequence, shuffled.  Return Value A shuffled array of this sequence’s elements. Discussion For example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:  This method is equivalent to calling shuffled(using:), passing in the system’s default random generator. O(n), where n is the length of the sequence.","kind":"symbol","title":"shuffled()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/shuffled()","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, shuffled."},{"rawIndexableTextContent":"Returns the result of combining the elements of the sequence using the given closure.  Return Value The final accumulated value. If the sequence has no elements, the result is initialResult. The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed. A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller. Discussion Use the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product. The nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.  When numbers.reduce(_:_:) is called, the following steps occur: The nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1. The closure is called again repeatedly with the previous call’s return value and each element of the sequence. When the sequence is exhausted, the last value returned from the closure is returned to the caller. If the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:). O(n), where n is the length of the sequence.","kind":"symbol","title":"reduce(_:_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/reduce(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns the result of combining the elements of the sequence using the given closure."},{"rawIndexableTextContent":"Returns a subsequence from the start of the collection through the specified position.  Return Value A subsequence up to, and including, the end position. The index of the last element to include in the resulting subsequence. end must be a valid index of the collection that is not equal to the endIndex property. Discussion The resulting subsequence includes the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:  Using the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).  O(1)","kind":"symbol","title":"prefix(through:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/prefix(through:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence from the start of the collection through the specified position."},{"rawIndexableTextContent":"Encodes this value into the given encoder, when the type’s RawValue is String.  The encoder to write data to. Discussion This function throws an error if any values are invalid for the given encoder’s format.","kind":"symbol","title":"encode(to:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this value into the given encoder, when the type’s RawValue is String."},{"rawIndexableTextContent":"Creates an instance initialized to the given value.  The value of the new instance.","kind":"symbol","title":"init(unicodeScalarLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/init(unicodeScalarLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given value."},{"rawIndexableTextContent":"Getting started using Automerge in your app. Overview The following content walks you through creating a model that collaborators update. With your model, you create an Automerge document, update that document, and inspect it. Then you can replicate the document to represent another collaborator, update the two models independently, and merge the results. The content then shows how to get and display the change history for your model that is encoded into the Automerge document. Creating a Model for Automerge Automerge expects its documents to have a model. Make your document’s model a codable struct, but do not provide any custom Codable protocol implementations or custom CodingKeys.  With your model defined, create a document with an initial value for your model. The following snippet creates a document named doc1 that contains an empty list of cards:  Updating your Model through the Automerge Document Treat your document an an immutable view of your current model’s state. To change a document, call the change(message:_:) method with a closure, and update your model’s state within that closure. You can also include a human-readable description of the change, similar to a commit message, which automerge stores in the change history. The following snippet shows an example of adding a new card into your document:  When you use a list in your model, you can use all the methods provided by RangeReplacableCollection on that list within the closure. For example, the following code snippet adds an additional card using the insert(_:at:) method:  Sharing Automerge Documents between Collaborators To simulate a collaborator working on the same document, create a new document from your document’s change history, as shown in the following snippet:  Now you can make changes in each document indepdendently. The following code snippet shows updating one of the cards in the first document, and removing that same card in the second document:  Merging Changes Between Collaborators Automerge provides the mechanisms to consistently merge changes, including those changes that would normally appear to conflict. The following example shows merging the changes from the second document back into the first:  You can merge documents in a either direction, and automerge returns the same resulting state. The merged result includes the history that the card labeled ‘Rewrite everything in Swift’ was set to true, and the card ‘Rewrite everything in Obj-C’ was deleted. Displaying the Change History of an Automerge Document You can also inspect the details of the change history associated with a document. Automerge keeps track of all changes, along with any messages that included when change(message:_:) was called. When you query that history, it the changes you made locally and any changes that you merged in from collaborators. The change history also provides a snapshot of your model’s state at any point in the change history. The following example uses map to iterate through the change history and count how many cards existed at each change: ","kind":"article","title":"Automerge Basics","headings":["Overview","Creating a Model for Automerge","Updating your Model through the Automerge Document","Sharing Automerge Documents between Collaborators","Merging Changes Between Collaborators","Displaying the Change History of an Automerge Document"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/AutomergeBasics","interfaceLanguage":"swift"}},"summary":"Getting started using Automerge in your app."},{"rawIndexableTextContent":"Returns the first index where the specified value appears in the collection.  Return Value The first index where element is found. If element is not found in the collection, returns nil. An element to search for in the collection. Discussion After using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.  O(n), where n is the length of the collection.","kind":"symbol","title":"firstIndex(of:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/firstIndex(of:)","interfaceLanguage":"swift"}},"summary":"Returns the first index where the specified value appears in the collection."},{"rawIndexableTextContent":"Creates an instance initialized to the given string value.  The value of the new instance.","kind":"symbol","title":"init(stringLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/init(stringLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given string value."},{"rawIndexableTextContent":"Returns the maximum element in the sequence, using the given predicate as the comparison between elements.  Return Value The sequence’s maximum element if the sequence is not empty; otherwise, nil. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.  O(n), where n is the length of the sequence.","kind":"symbol","title":"max(by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/max(by:)","interfaceLanguage":"swift"}},"summary":"Returns the maximum element in the sequence, using the given predicate as the comparison between elements."},{"rawIndexableTextContent":"The number of elements in the collection.  Discussion To check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.","kind":"symbol","title":"count","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/count","interfaceLanguage":"swift"}},"summary":"The number of elements in the collection."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Comparable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/Comparable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates an instance initialized to the given value.  The value of the new instance.","kind":"symbol","title":"init(extendedGraphemeClusterLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/init(extendedGraphemeClusterLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given value."},{"rawIndexableTextContent":"An operation that increments a value. ","kind":"symbol","title":"OpAction.inc","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/inc","interfaceLanguage":"swift"}},"summary":"An operation that increments a value."},{"rawIndexableTextContent":"Creates a new Text data structure. ","kind":"symbol","title":"init()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/init()","interfaceLanguage":"swift"}},"summary":"Creates a new Text data structure."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":" Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"A Boolean value indicating whether the collection is empty.  Discussion When you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.  O(1)","kind":"symbol","title":"isEmpty","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/isEmpty","interfaceLanguage":"swift"}},"summary":"A Boolean value indicating whether the collection is empty."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"distance(from:to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/distance(from:to:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"DataType.counter","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/counter","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the conflict at the index location you provide that Automerge has registered while it applied changes to your model.  Return Value An optional map keyed by the ObjectId with the conflicting change and the value that it proposed.","kind":"symbol","title":"conflicts(index:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/conflicts(index:)","interfaceLanguage":"swift"}},"summary":"Returns the conflict at the index location you provide that Automerge has registered while it applied changes to your model."},{"rawIndexableTextContent":"A value less than or equal to the number of elements in the collection.  Discussion O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.","kind":"symbol","title":"underestimatedCount","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/underestimatedCount-4udgx","interfaceLanguage":"swift"}},"summary":"A value less than or equal to the number of elements in the collection."},{"rawIndexableTextContent":"The first element of the collection.  Discussion If the collection is empty, the value of this property is nil. ","kind":"symbol","title":"first","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/first","interfaceLanguage":"swift"}},"summary":"The first element of the collection."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"multiOp","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/multiOp","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByUnicodeScalarLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/ExpressibleByUnicodeScalarLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a subsequence, up to the given maximum length, containing the final elements of the sequence.  The maximum number of elements to return. The value of maxLength must be greater than or equal to zero. Discussion The sequence must be finite. If the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.  O(n), where n is the length of the sequence.","kind":"symbol","title":"suffix(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/suffix(_:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence, up to the given maximum length, containing the final elements of the sequence."},{"rawIndexableTextContent":"An optional message associated with the change. ","kind":"symbol","title":"message","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Change\/message","interfaceLanguage":"swift"}},"summary":"An optional message associated with the change."},{"rawIndexableTextContent":"A string representation of the Text data structure. ","kind":"symbol","title":"description","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/description","interfaceLanguage":"swift"}},"summary":"A string representation of the Text data structure."},{"rawIndexableTextContent":"Returns a Boolean value that indicates whether the value of the first objectId is less than that of the second. ","kind":"symbol","title":"<(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/_(_:_:)-1qug","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates whether the value of the first objectId is less than that of the second."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByBooleanLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/ExpressibleByBooleanLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the position immediately after the given index.  Return Value The index value immediately after i. A valid index of the collection. i must be less than endIndex. Discussion The successor of an index must be well defined. For an index i into a collection c, calling c.index(after: i) returns the same index every time.","kind":"symbol","title":"index(after:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/index(after:)","interfaceLanguage":"swift"}},"summary":"Returns the position immediately after the given index."},{"rawIndexableTextContent":"A class that wraps the Automerge-rs core library. ","kind":"symbol","title":"RSBackend","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend","interfaceLanguage":"swift"}},"summary":"A class that wraps the Automerge-rs core library."},{"rawIndexableTextContent":"Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.  A closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again. Discussion O(n), where n is the length of the collection.","kind":"symbol","title":"prefix(while:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/prefix(while:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements."},{"rawIndexableTextContent":"The index to the start of the collection. ","kind":"symbol","title":"startIndex","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/startIndex","interfaceLanguage":"swift"}},"summary":"The index to the start of the collection."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.  Return Value true if this sequence and other contain the same elements in the same order. A sequence to compare to this sequence. Discussion At least one of the sequences must be finite. This example tests whether one countable range shares the same elements as another countable range and an array.  O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol","title":"elementsEqual(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/elementsEqual(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"formatted(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/formatted(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates an instance initialized to the given value.  The value of the new instance.","kind":"symbol","title":"init(unicodeScalarLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/init(unicodeScalarLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given value."},{"rawIndexableTextContent":"Encodes this Text data structure into the provided encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this Text data structure into the provided encoder."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"Primitive.float64(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/float64(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The number of entries in the row. ","kind":"symbol","title":"count","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/count","interfaceLanguage":"swift"}},"summary":"The number of entries in the row."},{"rawIndexableTextContent":"Creates a new instance by decoding from the given decoder, when the type’s RawValue is String.  The decoder to read data from. Discussion This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.","kind":"symbol","title":"init(from:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new instance by decoding from the given decoder, when the type’s RawValue is String."},{"rawIndexableTextContent":"Accesses the element at the specified position.  The position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property. Overview The following example accesses an element of an array through its subscript to print its value:  You can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element. O(1)","kind":"symbol","title":"subscript(_:)","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/subscript(_:)-6eon5","interfaceLanguage":"swift"}},"summary":"Accesses the element at the specified position."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The index at the end of the collection. ","kind":"symbol","title":"endIndex","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/endIndex","interfaceLanguage":"swift"}},"summary":"The index at the end of the collection."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"objectId","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/AnyProxy\/objectId","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.  Return Value The difference needed to produce the receiver’s state from the parameter’s state. The base state. A closure that returns a Boolean value indicating whether two elements are equivalent. Discussion This function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference. Worst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements.","kind":"symbol","title":"difference(from:by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/difference(from:by:)","interfaceLanguage":"swift"}},"summary":"Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."},{"rawIndexableTextContent":"Creates a new document from an encoded change history.  A byte buffer of the encoded change history of the model. The identity of the collaborator that owns this document.","kind":"symbol","title":"init(data:actor:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/init(data:actor:)","interfaceLanguage":"swift"}},"summary":"Creates a new document from an encoded change history."},{"rawIndexableTextContent":"Returns the character at the index location you provide. ","kind":"symbol","title":"subscript(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/subscript(_:)-51etu","interfaceLanguage":"swift"}},"summary":"Returns the character at the index location you provide."},{"rawIndexableTextContent":"Returns the minimum element in the sequence, using the given predicate as the comparison between elements.  Return Value The sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.  O(n), where n is the length of the sequence.","kind":"symbol","title":"min(by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/min(by:)","interfaceLanguage":"swift"}},"summary":"Returns the minimum element in the sequence, using the given predicate as the comparison between elements."},{"rawIndexableTextContent":"A wrapper around your codable model that tracks collaborative changes and provides an immutable views of the model’s history.  Overview Use a document by creating a document around your model using init(_:actor:), and update your model within a trailing closure provided by change(message:_:). The initializer takes an optional Actor parameter. An actor has a actorId, a string that uniquely identifies the collaborator. if you omit the actor, an actor with a random ID is generated. If you pass in your own actor ID, ensure that there can never be two different collaborators with the same actor ID. Even if you have two different processes running on the same machine, they must have distinct actor IDs. Unless you intend otherwise, don’t provode an actor and let the actor be auto-generated. Persist your document using save(), which writes a compact version of the change history that you can write to disk. Create a new document from the binary data created from save() with the initializer init(data:actor:). With a document representing the state of your model, and another document representing a collaborator’s model state, get the changes using getChanges(between:), and selectively apply them to either document using apply(changes:). The Automerge library is agnostic to the network layer. Use whatever communication mechanism you like to get changes from one collaborator to another. Note that getChanges(between:) takes an old document state as argument and returns a list of all the changes that are different between the new and old document. If you want a list of all the changes ever made in doc, call allChanges(). The counterpart, apply(changes:) applies the list of changes to the document. Automerge guarantees that when two documents have applied the same set of changes — even if the changes were applied in a different order — the two documents are equal. This property is known as convergence, and it is at the core of what Automerge provides. You can instantiate a document from another collaborator with its encoded change history using init(data:actor:), or using a list of changes with the init(changes:actor:) initializer. You can merge the collaborator’s change history into your document using merge(_:). You can inspect the details of the change history by initializing History with your document.","kind":"symbol","title":"Document","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document","interfaceLanguage":"swift"}},"summary":"A wrapper around your codable model that tracks collaborative changes and provides an immutable views of the model’s history."},{"rawIndexableTextContent":"A data structure that represents a table of rows. ","kind":"symbol","title":"Table","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table","interfaceLanguage":"swift"}},"summary":"A data structure that represents a table of rows."},{"rawIndexableTextContent":"Creates an instance initialized to the given value.  The value of the new instance.","kind":"symbol","title":"init(unicodeScalarLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/init(unicodeScalarLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given value."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByIntegerLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/ExpressibleByIntegerLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"If lhs is ordered before rhs in the ordering described by the given sequence of SortComparators  Discussion The first element of the sequence of comparators specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values.","kind":"symbol","title":"compare(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/compare(_:_:)","interfaceLanguage":"swift"}},"summary":"If lhs is ordered before rhs in the ordering described by the given sequence of SortComparators"},{"rawIndexableTextContent":"Encodes this value into the given encoder.  The encoder to write data to. Discussion If the value fails to encode anything, encoder will encode an empty keyed container in its place. This function throws an error if any values are invalid for the given encoder’s format.","kind":"symbol","title":"encode(to:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this value into the given encoder."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The index to the start of the collection. ","kind":"symbol","title":"startIndex","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/startIndex","interfaceLanguage":"swift"}},"summary":"The index to the start of the collection."},{"rawIndexableTextContent":"Removes the row matching the provided id from your table model.  The id of the row to remove. Discussion Throws an exception if the row does not exist in the table.","kind":"symbol","title":"removeRow(by:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/removeRow(by:)","interfaceLanguage":"swift"}},"summary":"Removes the row matching the provided id from your table model."},{"rawIndexableTextContent":"Returns a random element of the collection, using the given generator as a source for randomness.  Return Value A random element from the collection. If the collection is empty, the method returns nil. The random number generator to use when choosing a random element. Discussion Call randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection. The algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift.","kind":"symbol","title":"randomElement(using:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/randomElement(using:)","interfaceLanguage":"swift"}},"summary":"Returns a random element of the collection, using the given generator as a source for randomness."},{"rawIndexableTextContent":"Replaces a set of characters at the index positions you provide with a new set of characters.  The range of the characters to replace. The characters to insert within the range provided.","kind":"symbol","title":"replaceSubrange(_:with:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/replaceSubrange(_:with:)-3vg23","interfaceLanguage":"swift"}},"summary":"Replaces a set of characters at the index positions you provide with a new set of characters."},{"rawIndexableTextContent":"Returns a Boolean value that indicates whether the value of the first actor’s Id is less than that of the second actor’s Id. ","kind":"symbol","title":"<(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/_(_:_:)-2dqhe","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates whether the value of the first actor’s Id is less than that of the second actor’s Id."},{"rawIndexableTextContent":"Returns the last element of the sequence that satisfies the given predicate.  Return Value The last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate. A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match. Discussion This example uses the last(where:) method to find the last negative number in an array of integers:  O(n), where n is the length of the collection.","kind":"symbol","title":"last(where:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/last(where:)","interfaceLanguage":"swift"}},"summary":"Returns the last element of the sequence that satisfies the given predicate."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"DataType.timestamp","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/timestamp","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Sets an updated Date into your model.  The updated value for the Date.","kind":"symbol","title":"set(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/set(_:)-4medz","interfaceLanguage":"swift"}},"summary":"Sets an updated Date into your model."},{"rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given comparator to compare elements.  Return Value an array of the elements sorted using comparator. the comparator to use in ordering elements","kind":"symbol","title":"sorted(using:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/sorted(using:)-9d8y7","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, sorted using the given comparator to compare elements."},{"rawIndexableTextContent":"Updates your document’s model object with a new instance of the model.  The updated state for your model.","kind":"symbol","title":"set(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/set(_:)","interfaceLanguage":"swift"}},"summary":"Updates your document’s model object with a new instance of the model."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"index(_:offsetBy:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/index(_:offsetBy:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.  Return Value true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true. A sequence to compare to this sequence. Discussion This example tests whether one countable range begins with the elements of another countable range.  Passing a sequence with no elements or an empty collection as possiblePrefix always results in true.  O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.","kind":"symbol","title":"starts(with:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/starts(with:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence."},{"rawIndexableTextContent":"Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.  Return Value The resulting flattened array. A closure that accepts an element of this sequence as its argument and returns a sequence or collection. Discussion Use this method to receive a single-level collection when your transformation produces a sequence or collection for each element. In this example, note the difference in the result of using map and flatMap with a transformation that returns an array.  In fact, s.flatMap(transform)  is equivalent to Array(s.map(transform).joined()). O(m + n), where n is the length of this sequence and m is the length of the result.","kind":"symbol","title":"flatMap(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/flatMap(_:)-60em4","interfaceLanguage":"swift"}},"summary":"Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."},{"rawIndexableTextContent":"Returns a subsequence from the specified position to the end of the collection.  Return Value A subsequence starting at the start position. The index at which to start the resulting subsequence. start must be a valid index of the collection. Discussion The following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:  Passing the collection’s endIndex as the start parameter results in an empty subsequence.  Using the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).  O(1)","kind":"symbol","title":"suffix(from:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/suffix(from:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence from the specified position to the end of the collection."},{"rawIndexableTextContent":"An operation that creates a List object. ","kind":"symbol","title":"OpAction.makeList","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/makeList","interfaceLanguage":"swift"}},"summary":"An operation that creates a List object."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByIntegerLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Counter\/ExpressibleByIntegerLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"Primitive.int(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/int(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByUnicodeScalarLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/ExpressibleByUnicodeScalarLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Replaces the given index with its successor.  A valid index of the collection. i must be less than endIndex.","kind":"symbol","title":"formIndex(after:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/formIndex(after:)","interfaceLanguage":"swift"}},"summary":"Replaces the given index with its successor."},{"rawIndexableTextContent":"Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.  Return Value An array of subsequences, split from this collection’s elements. The element that should be split upon. The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max. If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true. Discussion The resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence. The following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.  The second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.  The final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.  O(n), where n is the length of the collection.","kind":"symbol","title":"split(separator:maxSplits:omittingEmptySubsequences:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/split(separator:maxSplits:omittingEmptySubsequences:)","interfaceLanguage":"swift"}},"summary":"Returns the longest possible subsequences of the collection, in order, around elements equal to the given element."},{"rawIndexableTextContent":"Deletes a character at the location you provide.  The location of the character to remove.","kind":"symbol","title":"delete(at:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/delete(at:)","interfaceLanguage":"swift"}},"summary":"Deletes a character at the location you provide."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"flatMap(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/flatMap(_:)-7k736","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByFloatLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/ExpressibleByFloatLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The current state of the wrapped model. ","kind":"symbol","title":"content","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/content","interfaceLanguage":"swift"}},"summary":"The current state of the wrapped model."},{"rawIndexableTextContent":"Returns the first element of the sequence that satisfies the given predicate.  Return Value The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate. A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match. Discussion The following example uses the first(where:) method to find the first negative number in an array of integers:  O(n), where n is the length of the sequence.","kind":"symbol","title":"first(where:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/first(where:)","interfaceLanguage":"swift"}},"summary":"Returns the first element of the sequence that satisfies the given predicate."},{"rawIndexableTextContent":"Returns a sequence, up to the specified maximum length, containing the initial elements of the sequence.  Return Value A sequence starting at the beginning of this sequence with at most maxLength elements. The maximum number of elements to return. The value of maxLength must be greater than or equal to zero. Discussion If the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.  O(1)","kind":"symbol","title":"prefix(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/prefix(_:)","interfaceLanguage":"swift"}},"summary":"Returns a sequence, up to the specified maximum length, containing the initial elements of the sequence."},{"rawIndexableTextContent":"An operation that creates a Table object. ","kind":"symbol","title":"OpAction.makeTable","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/makeTable","interfaceLanguage":"swift"}},"summary":"An operation that creates a Table object."},{"rawIndexableTextContent":"Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.  A closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again. Discussion O(n), where n is the length of the collection.","kind":"symbol","title":"drop(while:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/drop(while:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements."},{"rawIndexableTextContent":"Removes a number of characters starting at the location you provide.  The number of characters to remove. The index location of where to start removing the characters.","kind":"symbol","title":"delete(_:charactersAtIndex:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/delete(_:charactersAtIndex:)","interfaceLanguage":"swift"}},"summary":"Removes a number of characters starting at the location you provide."},{"rawIndexableTextContent":"Creates an instance initialized to the specified integer value.  The value to create. Discussion Do not call this initializer directly. Instead, initialize a variable or constant using an integer literal. For example:  In this example, the assignment to the x constant calls this integer literal initializer behind the scenes.","kind":"symbol","title":"init(integerLiteral:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/init(integerLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the specified integer value."},{"rawIndexableTextContent":"The indices that are valid for subscripting the collection, in ascending order.  Discussion A collection’s indices property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead. ","kind":"symbol","title":"indices","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/indices","interfaceLanguage":"swift"}},"summary":"The indices that are valid for subscripting the collection, in ascending order."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.  Return Value true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false. A sequence to compare to this sequence. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode.  If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead. O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol","title":"lexicographicallyPrecedes(_:by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/lexicographicallyPrecedes(_:by:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.  Return Value true if this sequence precedes other in a dictionary ordering; otherwise, false. A sequence to compare to this sequence. Discussion This example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.  This method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode.  If you are sorting strings to present to the end user, use String APIs that perform localized comparison. O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol","title":"lexicographicallyPrecedes(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/lexicographicallyPrecedes(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements."},{"rawIndexableTextContent":"The type of the element of the collection. ","kind":"symbol","title":"MutableProxy.Element","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/Element","interfaceLanguage":"swift"}},"summary":"The type of the element of the collection."},{"rawIndexableTextContent":"Creates a new Patch by decoding from the provided decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Patch\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new Patch by decoding from the provided decoder."},{"rawIndexableTextContent":"Creates an instance initialized to the given string value.  The value of the new instance.","kind":"symbol","title":"init(stringLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/init(stringLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given string value."},{"rawIndexableTextContent":"Returns the current value of the property using a KeyPath you provide to your model. ","kind":"symbol","title":"subscript(dynamicMember:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/subscript(dynamicMember:)-2yow9","interfaceLanguage":"swift"}},"summary":"Returns the current value of the property using a KeyPath you provide to your model."},{"rawIndexableTextContent":"Creates an instance initialized to the given value.  The value of the new instance.","kind":"symbol","title":"init(unicodeScalarLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/init(unicodeScalarLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given value."},{"rawIndexableTextContent":"Returns a list of changes between the current document and the document provided.  Return Value A list of changes between the two documents. A Document from a collaborator or an earlier saved version.","kind":"symbol","title":"getChanges(between:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/getChanges(between:)","interfaceLanguage":"swift"}},"summary":"Returns a list of changes between the current document and the document provided."},{"rawIndexableTextContent":"Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.  Return Value An array of subsequences, split from this collection’s elements. The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max. If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true. A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element. Discussion The resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence. The following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.  The second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.  The final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.  O(n), where n is the length of the collection.","kind":"symbol","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"}},"summary":"Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"getPatch()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend\/getPatch()","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates an instance initialized to the given value.  The value of the new instance.","kind":"symbol","title":"init(unicodeScalarLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/init(unicodeScalarLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given value."},{"rawIndexableTextContent":"Returns a subsequence, up to the given maximum length, containing the final elements of the collection.  Return Value A subsequence terminating at the end of the collection with at most maxLength elements. The maximum number of elements to return. The value of maxLength must be greater than or equal to zero. Discussion If the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.","kind":"symbol","title":"suffix(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/suffix(_:)","interfaceLanguage":"swift"}},"summary":"Returns a subsequence, up to the given maximum length, containing the final elements of the collection."},{"rawIndexableTextContent":"Replaces a string at the index positions you provide with a new set of characters.  The range of the characters to replace. The string to insert within the range provided.","kind":"symbol","title":"replaceSubrange(_:with:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/replaceSubrange(_:with:)-65ff4","interfaceLanguage":"swift"}},"summary":"Replaces a string at the index positions you provide with a new set of characters."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"DataType.int","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/int","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns an array containing the elements of this sequence in reverse order.  Return Value An array containing the elements of this sequence in reverse order. Discussion The sequence must be finite. O(n), where n is the length of the sequence.","kind":"symbol","title":"reversed()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/reversed()","interfaceLanguage":"swift"}},"summary":"Returns an array containing the elements of this sequence in reverse order."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.  A value to compare. Another value to compare. Discussion This is the default implementation of the greater-than operator (>) for any type that conforms to Comparable.","kind":"symbol","title":">(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/_(_:_:)-8p03o","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument."},{"rawIndexableTextContent":"Replaces the specified subrange of elements with the given collection.  The subrange of the collection to replace. The bounds of the range must be valid indices of the collection. The new elements to add to the collection. Discussion This method has the effect of removing the specified range of elements from the collection and inserting the new elements at the same location. The number of new elements need not match the number of elements being removed. In this example, three elements in the middle of an array of integers are replaced by the five elements of a Repeated<Int> instance.  If you pass a zero-length range as the subrange parameter, this method inserts the elements of newElements at subrange.startIndex. Calling the insert(contentsOf:at:) method instead is preferred. Likewise, if you pass a zero-length collection as the newElements parameter, this method removes the elements in the given subrange without replacement. Calling the removeSubrange(_:) method instead is preferred. Calling this method may invalidate any existing indices for use with this collection. O(n + m), where n is length of this collection and m is the length of newElements. If the call to this method simply appends the contents of newElements to the collection, this method is equivalent to append(contentsOf:).","kind":"symbol","title":"replaceSubrange(_:with:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/replaceSubrange(_:with:)-1svuj","interfaceLanguage":"swift"}},"summary":"Replaces the specified subrange of elements with the given collection."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"An operation that creates a Map object. ","kind":"symbol","title":"OpAction.makeMap","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/makeMap","interfaceLanguage":"swift"}},"summary":"An operation that creates a Map object."},{"rawIndexableTextContent":"Returns an index that is the specified distance from the given index.  Return Value An index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:). A valid index of the collection. The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol. Discussion The following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.  The value passed as distance must not offset i beyond the bounds of the collection. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.","kind":"symbol","title":"index(_:offsetBy:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/index(_:offsetBy:)","interfaceLanguage":"swift"}},"summary":"Returns an index that is the specified distance from the given index."},{"rawIndexableTextContent":"Inserts a list of characters at the location you provide for the text model.  The list of characters to insert. The location to insert the list of characters.","kind":"symbol","title":"insert(contentsOf:at:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/insert(contentsOf:at:)","interfaceLanguage":"swift"}},"summary":"Inserts a list of characters at the location you provide for the text model."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"subscript(dynamicMember:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/subscript(dynamicMember:)-9rb7n","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByNilLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/ExpressibleByNilLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a new Actor by decoding from the provided decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new Actor by decoding from the provided decoder."},{"rawIndexableTextContent":"If lhs is ordered before rhs in the ordering described by the given sequence of SortComparators  Discussion The first element of the sequence of comparators specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values.","kind":"symbol","title":"compare(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/compare(_:_:)","interfaceLanguage":"swift"}},"summary":"If lhs is ordered before rhs in the ordering described by the given sequence of SortComparators"},{"rawIndexableTextContent":"Returns an array containing the results of mapping the given closure over the sequence’s elements.  Return Value An array containing the transformed elements of this sequence. A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. Discussion In this example, map is used first to convert the names in the array to lowercase strings and then to count their characters. ","kind":"symbol","title":"map(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/map(_:)-6ywpf","interfaceLanguage":"swift"}},"summary":"Returns an array containing the results of mapping the given closure over the sequence’s elements."},{"rawIndexableTextContent":"Returns the elements of the sequence, sorted.  Return Value A sorted array of the sequence’s elements. Discussion You can sort any sequence of elements that conform to the Comparable protocol by calling this method. Elements are sorted in ascending order. Here’s an example of sorting a list of students’ names. Strings in Swift conform to the Comparable protocol, so the names are sorted in ascending order according to the less-than operator (<).  To sort the elements of your sequence in descending order, pass the greater-than operator (>) to the sorted(by:) method.  The sorting algorithm is not guaranteed to be stable. A stable sort preserves the relative order of elements that compare equal. O(n log n), where n is the length of the sequence.","kind":"symbol","title":"sorted()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/sorted()","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, sorted."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByStringLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/ExpressibleByStringLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a random element of the collection.  Return Value A random element from the collection. If the collection is empty, the method returns nil. Discussion Call randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:  This method is equivalent to calling randomElement(using:), passing in the system’s default random generator. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.","kind":"symbol","title":"randomElement()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/randomElement()","interfaceLanguage":"swift"}},"summary":"Returns a random element of the collection."},{"rawIndexableTextContent":"Returns an iterator over the elements of the collection. ","kind":"symbol","title":"makeIterator()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/makeIterator()","interfaceLanguage":"swift"}},"summary":"Returns an iterator over the elements of the collection."},{"rawIndexableTextContent":"Adds a row you provide to the table model in your document.  Return Value The objectId of the added row.","kind":"symbol","title":"add(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/add(_:)","interfaceLanguage":"swift"}},"summary":"Adds a row you provide to the table model in your document."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Counter\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Collection Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/Collection-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"RawRepresentable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/RawRepresentable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given comparator to compare elements.  Return Value an array of the elements sorted using comparator. the comparator to use in ordering elements","kind":"symbol","title":"sorted(using:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/sorted(using:)-6wb0a","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, sorted using the given comparator to compare elements."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"getChanges(heads:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend\/getChanges(heads:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.  Return Value true if the sequence contains only elements that satisfy predicate; otherwise, false. A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition. Discussion The following code uses this method to test whether all the names in an array have at least five characters:  O(n), where n is the length of the sequence.","kind":"symbol","title":"allSatisfy(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/allSatisfy(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByUnicodeScalarLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/ExpressibleByUnicodeScalarLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"An operation that links to a value. ","kind":"symbol","title":"OpAction.link","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/link","interfaceLanguage":"swift"}},"summary":"An operation that links to a value."},{"rawIndexableTextContent":"A struct that represents a unique operation that makes up the change history of an Automerge document. ","kind":"symbol","title":"Op","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op","interfaceLanguage":"swift"}},"summary":"A struct that represents a unique operation that makes up the change history of an Automerge document."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"subscript(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/subscript(_:)-7rfwk","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a new Text data stucture from the string representation you provide.  The string representation of the Text data structure.","kind":"symbol","title":"init(stringLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/init(stringLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates a new Text data stucture from the string representation you provide."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence contains the given element.  Return Value true if the element was found in the sequence; otherwise, false. The element to find in the sequence. Discussion This example checks to see whether a favorite actor is in an array storing a movie’s cast.  O(n), where n is the length of the sequence.","kind":"symbol","title":"contains(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/contains(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the sequence contains the given element."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"Primitive.uint(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/uint(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"A value less than or equal to the number of elements in the collection.  Discussion O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.","kind":"symbol","title":"underestimatedCount","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/underestimatedCount-8lb7n","interfaceLanguage":"swift"}},"summary":"A value less than or equal to the number of elements in the collection."},{"rawIndexableTextContent":"Accesses the element at the specified position.  The position of the element to access. position must be a valid index of the collection that is not equal to the endIndex property. Overview The following example accesses an element of an array through its subscript to print its value:  You can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element. O(1)","kind":"symbol","title":"subscript(_:)","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/subscript(_:)","interfaceLanguage":"swift"}},"summary":"Accesses the element at the specified position."},{"rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given array of SortComparators to compare elements.  Return Value an array of the elements sorted using comparators. an array of comparators used to compare elements. The first comparator specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values.","kind":"symbol","title":"sorted(using:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/sorted(using:)-6v8yj","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, sorted using the given array of SortComparators to compare elements."},{"rawIndexableTextContent":"Updates your document’s model object with a new instance of the model.  The updated state for your model.","kind":"symbol","title":"set(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/set(_:)-6v5af","interfaceLanguage":"swift"}},"summary":"Updates your document’s model object with a new instance of the model."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Sequence Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/Sequence-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The last element of the collection.  Discussion If the collection is empty, the value of this property is nil.  O(1)","kind":"symbol","title":"last","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/last","interfaceLanguage":"swift"}},"summary":"The last element of the collection."},{"rawIndexableTextContent":"Increments the counter by the value you provide.  The amount to increment the counter, defaults to 1.","kind":"symbol","title":"increment(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/increment(_:)","interfaceLanguage":"swift"}},"summary":"Increments the counter by the value you provide."},{"rawIndexableTextContent":"Returns the result of combining the elements of the sequence using the given closure.  Return Value The final accumulated value. If the sequence has no elements, the result is initialResult. The value to use as the initial accumulating value. A closure that updates the accumulating value with an element of the sequence. Discussion Use the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies. This method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary. The updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.  When letters.reduce(into:_:) is called, the following steps occur: The updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\". The closure is called again repeatedly with the updated accumulating value and each element of the sequence. When the sequence is exhausted, the accumulating value is returned to the caller. If the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:). O(n), where n is the length of the sequence.","kind":"symbol","title":"reduce(into:_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/reduce(into:_:)","interfaceLanguage":"swift"}},"summary":"Returns the result of combining the elements of the sequence using the given closure."},{"rawIndexableTextContent":"Offsets the given index by the specified distance, or so that it equals the given limiting index.  Return Value true if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit. A valid index of the collection. The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol. A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect. Discussion The value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.","kind":"symbol","title":"formIndex(_:offsetBy:limitedBy:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/formIndex(_:offsetBy:limitedBy:)","interfaceLanguage":"swift"}},"summary":"Offsets the given index by the specified distance, or so that it equals the given limiting index."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Collection Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/Collection-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"as(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/AnyProxy\/as(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.  Return Value The resulting flattened array. A closure that accepts an element of this sequence as its argument and returns a sequence or collection. Discussion Use this method to receive a single-level collection when your transformation produces a sequence or collection for each element. In this example, note the difference in the result of using map and flatMap with a transformation that returns an array.  In fact, s.flatMap(transform)  is equivalent to Array(s.map(transform).joined()). O(m + n), where n is the length of this sequence and m is the length of the result.","kind":"symbol","title":"flatMap(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/flatMap(_:)-5zao","interfaceLanguage":"swift"}},"summary":"Returns an array containing the concatenated results of calling the given transformation with each element of this sequence."},{"rawIndexableTextContent":"Returns the current value of the optional property using a KeyPath you provide to your model. ","kind":"symbol","title":"subscript(dynamicMember:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/subscript(dynamicMember:)-9yayd","interfaceLanguage":"swift"}},"summary":"Returns the current value of the optional property using a KeyPath you provide to your model."},{"rawIndexableTextContent":"Returns the result of combining the elements of the sequence using the given closure.  Return Value The final accumulated value. If the sequence has no elements, the result is initialResult. The value to use as the initial accumulating value. A closure that updates the accumulating value with an element of the sequence. Discussion Use the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies. This method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary. The updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.  When letters.reduce(into:_:) is called, the following steps occur: The updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\". The closure is called again repeatedly with the updated accumulating value and each element of the sequence. When the sequence is exhausted, the accumulating value is returned to the caller. If the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:). O(n), where n is the length of the sequence.","kind":"symbol","title":"reduce(into:_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/reduce(into:_:)","interfaceLanguage":"swift"}},"summary":"Returns the result of combining the elements of the sequence using the given closure."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/Row\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Expose and highlight conflicting changes within a document. Overview Automerge allows different nodes to independently make arbitrary changes to their respective copies of a document. In most cases, those changes can be combined without any trouble. For example, if users modify two different objects, or two different properties in the same object, then it is straightforward to combine those changes. If users concurrently insert or delete items in a list (or characters in a text document), Automerge preserves all the insertions and deletions. If two users concurrently insert at the same position, Automerge arbitrarily places one of the insertions first and the other second, while ensuring that the final order is the same on all nodes. Conflicting changes When two collaborators concurrently update the same property in the same object (or, similarly, the same index in the same list), Automerge picks one of the concurrently written values as the “winner”.  Although only one of the concurrently written values shows up in the object, the other value that was set is not lost. Automerge tracks the actor Id and the value that it didn’t pick, and maintains that information as a conflict until that property is updated again. You can inspect the conflicts through the proxy returned from the document using the rootProxy() method. If the winning value of the property x is 2, then Automerge records a conflict on property x. In the following example, actor-1 is the ID of the actor that “lost” the conflict, and the associated value of the conflict is the value actor-1, the Id of the actor that lost the assignment to the property x:  Use the information from conflicts(dynamicMember:) (or conflicts(index:), used when the model is a list) to hint that the current value over-wrote another value. The change to a property that is listed in the conflicts, Automerge considers it resolved, and the conflict disappears from the change history.","kind":"article","title":"Conflicts in the Change History","headings":["Overview","Conflicting changes"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ConflictingChanges","interfaceLanguage":"swift"}},"summary":"Expose and highlight conflicting changes within a document."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"get()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/get()","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.  Return Value true if the sequence contains only elements that satisfy predicate; otherwise, false. A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition. Discussion The following code uses this method to test whether all the names in an array have at least five characters:  O(n), where n is the length of the sequence.","kind":"symbol","title":"allSatisfy(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/allSatisfy(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."},{"rawIndexableTextContent":"Returns the elements of the sequence, shuffled.  Return Value A shuffled array of this sequence’s elements. Discussion For example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:  This method is equivalent to calling shuffled(using:), passing in the system’s default random generator. O(n), where n is the length of the sequence.","kind":"symbol","title":"shuffled()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/shuffled()","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, shuffled."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Request\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"A data structure that represents text. ","kind":"symbol","title":"Text","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text","interfaceLanguage":"swift"}},"summary":"A data structure that represents text."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"apply(changes:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend\/apply(changes:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Comparable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/Comparable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The number of elements in the collection.  Discussion To check whether a collection is empty, use its isEmpty property instead of comparing count to zero. Unless the collection guarantees random-access performance, calculating count can be an O(n) operation. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.","kind":"symbol","title":"count","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/count","interfaceLanguage":"swift"}},"summary":"The number of elements in the collection."},{"rawIndexableTextContent":"Returns the first index in which an element of the collection satisfies the given predicate.  Return Value The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil. A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match. Discussion You can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:  O(n), where n is the length of the collection.","kind":"symbol","title":"firstIndex(where:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/firstIndex(where:)","interfaceLanguage":"swift"}},"summary":"Returns the first index in which an element of the collection satisfies the given predicate."},{"rawIndexableTextContent":"Returns the first element of the sequence that satisfies the given predicate.  Return Value The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate. A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match. Discussion The following example uses the first(where:) method to find the first negative number in an array of integers:  O(n), where n is the length of the sequence.","kind":"symbol","title":"first(where:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/first(where:)","interfaceLanguage":"swift"}},"summary":"Returns the first element of the sequence that satisfies the given predicate."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"formatted(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/formatted(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Call body(p), where p is a pointer to the collection’s contiguous storage.  If no such storage exists, it is first created.  If the collection does not support an internal representation in a form of contiguous storage, body is not called and nil is returned.  Discussion A Collection that provides its own implementation of this method must also guarantee that an equivalent buffer of its SubSequence can be generated by advancing the pointer by the distance to the slice’s startIndex.","kind":"symbol","title":"withContiguousStorageIfAvailable(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/withContiguousStorageIfAvailable(_:)","interfaceLanguage":"swift"}},"summary":"Call body(p), where p is a pointer to the collection’s contiguous storage.  If no such storage exists, it is first created.  If the collection does not support an internal representation in a form of contiguous storage, body is not called and nil is returned."},{"rawIndexableTextContent":"An objectId uniquely identifies an object in an Automerge document.  Overview It’s the identifier of the operation that created the object in Automerge. An object can be a map, a list, text, or table. Like any opId within Automerge, an objectId consists of a counter and the actorId of the actor that generated the operation. The string representation has the form counter@actorId.","kind":"symbol","title":"ObjectId","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId","interfaceLanguage":"swift"}},"summary":"An objectId uniquely identifies an object in an Automerge document."},{"rawIndexableTextContent":"Returns a list of the identifiers for changes in the document’s history. ","kind":"symbol","title":"getHeads()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/getHeads()","interfaceLanguage":"swift"}},"summary":"Returns a list of the identifiers for changes in the document’s history."},{"rawIndexableTextContent":"Call body(p), where p is a pointer to the collection’s contiguous storage.  If no such storage exists, it is first created.  If the collection does not support an internal representation in a form of contiguous storage, body is not called and nil is returned.  Discussion A Collection that provides its own implementation of this method must also guarantee that an equivalent buffer of its SubSequence can be generated by advancing the pointer by the distance to the slice’s startIndex.","kind":"symbol","title":"withContiguousStorageIfAvailable(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/withContiguousStorageIfAvailable(_:)","interfaceLanguage":"swift"}},"summary":"Call body(p), where p is a pointer to the collection’s contiguous storage.  If no such storage exists, it is first created.  If the collection does not support an internal representation in a form of contiguous storage, body is not called and nil is returned."},{"rawIndexableTextContent":"Creates an instance initialized to the given string value.  The value of the new instance.","kind":"symbol","title":"init(stringLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/init(stringLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given string value."},{"rawIndexableTextContent":"Returns a view presenting the elements of the collection in reverse order.  Discussion You can reverse a collection without allocating new space for its elements by calling this reversed() method. A ReversedCollection instance wraps an underlying collection and provides access to its elements in reverse order. This example prints the characters of a string in reverse order:  If you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer. For example, to get the reversed version of a string, reverse its characters and initialize a new String instance from the result.  O(1)","kind":"symbol","title":"reversed()","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/reversed()","interfaceLanguage":"swift"}},"summary":"Returns a view presenting the elements of the collection in reverse order."},{"rawIndexableTextContent":"Creates an instance initialized to the given value.  The value of the new instance.","kind":"symbol","title":"init(extendedGraphemeClusterLiteral:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/init(extendedGraphemeClusterLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the given value."},{"rawIndexableTextContent":"Creates a new Actor.  A string representation of the Actor","kind":"symbol","title":"init(actorId:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/init(actorId:)","interfaceLanguage":"swift"}},"summary":"Creates a new Actor."},{"rawIndexableTextContent":"Returns a closed range that contains both of its bounds.  The lower bound for the range. The upper bound for the range. Discussion Use the closed range operator (...) to create a closed range of any type that conforms to the Comparable protocol. This example creates a ClosedRange<Character> from “a” up to, and including, “z”.  minimum <= maximum.","kind":"symbol","title":"...(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/...(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns a closed range that contains both of its bounds."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.  Return Value true if lhs is greater than or equal to rhs; otherwise, false. A value to compare. Another value to compare. Discussion This is the default implementation of the greater-than-or-equal-to operator (>=) for any type that conforms to Comparable.","kind":"symbol","title":">=(_:_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/_=(_:_:)-1nvln","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."},{"rawIndexableTextContent":"Returns the distance between two indices.  Return Value The distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol. A valid index of the collection. Another valid index of the collection. If end is equal to start, the result is zero. Discussion Unless the collection conforms to the BidirectionalCollection protocol, start must be less than or equal to end. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the resulting distance.","kind":"symbol","title":"distance(from:to:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/distance(from:to:)","interfaceLanguage":"swift"}},"summary":"Returns the distance between two indices."},{"rawIndexableTextContent":"Inserts a string at the index location you provide for the text model.  The string to insert. The location to insert the string.","kind":"symbol","title":"insert(_:at:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/insert(_:at:)-4pr84","interfaceLanguage":"swift"}},"summary":"Inserts a string at the index location you provide for the text model."},{"rawIndexableTextContent":"Returns the index position prior to the index provided. ","kind":"symbol","title":"index(before:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/index(before:)","interfaceLanguage":"swift"}},"summary":"Returns the index position prior to the index provided."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"append(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/append(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Sequence Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/Sequence-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"A textual representation of this instance.  Discussion Calling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:  The conversion of p to a string in the assignment to s uses the Point type’s description property.","kind":"symbol","title":"description","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/description","interfaceLanguage":"swift"}},"summary":"A textual representation of this instance."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.  Return Value true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true. A sequence to compare to this sequence. A predicate that returns true if its two arguments are equivalent; otherwise, false. Discussion The predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold: areEquivalent(a, a) is always true. (Reflexivity) areEquivalent(a, b) implies areEquivalent(b, a). (Symmetry) If areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity) O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.","kind":"symbol","title":"starts(with:by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/starts(with:by:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test."},{"rawIndexableTextContent":"Creates an instance initialized to the specified integer value.  The value to create. Discussion Do not call this initializer directly. Instead, initialize a variable or constant using an integer literal. For example:  In this example, the assignment to the x constant calls this integer literal initializer behind the scenes.","kind":"symbol","title":"init(integerLiteral:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/init(integerLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the specified integer value."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"clone()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend\/clone()","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a type erased proxy to your model.  Return Value The type-erased proxy to your model.","kind":"symbol","title":"toAny()","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/toAny()","interfaceLanguage":"swift"}},"summary":"Returns a type erased proxy to your model."},{"rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given array of SortComparators to compare elements.  Return Value an array of the elements sorted using comparators. an array of comparators used to compare elements. The first comparator specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values.","kind":"symbol","title":"sorted(using:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/sorted(using:)-4pn47","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, sorted using the given array of SortComparators to compare elements."},{"rawIndexableTextContent":"Returns the result of combining the elements of the sequence using the given closure.  Return Value The final accumulated value. If the sequence has no elements, the result is initialResult. The value to use as the initial accumulating value. A closure that updates the accumulating value with an element of the sequence. Discussion Use the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies. This method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary. The updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.  When letters.reduce(into:_:) is called, the following steps occur: The updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\". The closure is called again repeatedly with the updated accumulating value and each element of the sequence. When the sequence is exhausted, the accumulating value is returned to the caller. If the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:). O(n), where n is the length of the sequence.","kind":"symbol","title":"reduce(into:_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/reduce(into:_:)","interfaceLanguage":"swift"}},"summary":"Returns the result of combining the elements of the sequence using the given closure."},{"rawIndexableTextContent":"The type to use for the index location in the collection. ","kind":"symbol","title":"Proxy.Index","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/Index","interfaceLanguage":"swift"}},"summary":"The type to use for the index location in the collection."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"Key.string(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/string(_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a new Text data structure by decoding from the provided decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new Text data structure by decoding from the provided decoder."},{"rawIndexableTextContent":"Returns the index following the index provided. ","kind":"symbol","title":"index(after:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/index(after:)","interfaceLanguage":"swift"}},"summary":"Returns the index following the index provided."},{"rawIndexableTextContent":"Removes a character at the location you provide.  The index location of the character to remove.","kind":"symbol","title":"delete(at:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/delete(at:)","interfaceLanguage":"swift"}},"summary":"Removes a character at the location you provide."},{"rawIndexableTextContent":"A mutable wrapper around your model. ","kind":"symbol","title":"MutableProxy","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy","interfaceLanguage":"swift"}},"summary":"A mutable wrapper around your model."},{"rawIndexableTextContent":"The index at the start of the collection of changes. ","kind":"symbol","title":"startIndex","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/startIndex","interfaceLanguage":"swift"}},"summary":"The index at the start of the collection of changes."},{"rawIndexableTextContent":"A class that represents the collection of changes and current change state of a document. ","kind":"symbol","title":"Patch","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Patch","interfaceLanguage":"swift"}},"summary":"A class that represents the collection of changes and current change state of a document."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Counter\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.  Return Value A single, concatenated string. A string to insert between each of the elements in this sequence. The default separator is an empty string. Discussion The following example shows how an array of strings can be joined to a single, comma-separated string: ","kind":"symbol","title":"joined(separator:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/joined(separator:)","interfaceLanguage":"swift"}},"summary":"Returns a new string by concatenating the elements of the sequence, adding the given separator between each element."},{"rawIndexableTextContent":"Returns an mutable proxy to an optional property in your model at the writable KeyPath you provide. ","kind":"symbol","title":"subscript(dynamicMember:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/subscript(dynamicMember:)-4irc0","interfaceLanguage":"swift"}},"summary":"Returns an mutable proxy to an optional property in your model at the writable KeyPath you provide."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"init()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend\/init()","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Collection Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/Collection-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The Id of the object this proxy represents. ","kind":"symbol","title":"objectId","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/objectId","interfaceLanguage":"swift"}},"summary":"The Id of the object this proxy represents."},{"rawIndexableTextContent":"Sets an updated Date into your model.  The updated value for the Date.","kind":"symbol","title":"set(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/set(_:)-4swzk","interfaceLanguage":"swift"}},"summary":"Sets an updated Date into your model."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"flatMap(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/flatMap(_:)-5lyjt","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"CustomStringConvertible Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/CustomStringConvertible-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily. ","kind":"symbol","title":"lazy","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/lazy","interfaceLanguage":"swift"}},"summary":"A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily."},{"rawIndexableTextContent":"The ID of the row. ","kind":"symbol","title":"id","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/Row\/id","interfaceLanguage":"swift"}},"summary":"The ID of the row."},{"rawIndexableTextContent":"A data structure that represents a counter. ","kind":"symbol","title":"Counter","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Counter","interfaceLanguage":"swift"}},"summary":"A data structure that represents a counter."},{"rawIndexableTextContent":"Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.  Return Value An array of the elements that isIncluded allowed. A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array. Discussion In this example, filter(_:) is used to include only names shorter than five characters.  O(n), where n is the length of the sequence.","kind":"symbol","title":"filter(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/filter(_:)","interfaceLanguage":"swift"}},"summary":"Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."},{"rawIndexableTextContent":"A value less than or equal to the number of elements in the sequence, calculated nondestructively.  Discussion The default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively. O(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount.","kind":"symbol","title":"underestimatedCount","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/underestimatedCount-5ffhf","interfaceLanguage":"swift"}},"summary":"A value less than or equal to the number of elements in the sequence, calculated nondestructively."},{"rawIndexableTextContent":"Returns the minimum element in the sequence, using the given predicate as the comparison between elements.  Return Value The sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.  O(n), where n is the length of the sequence.","kind":"symbol","title":"min(by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/min(by:)","interfaceLanguage":"swift"}},"summary":"Returns the minimum element in the sequence, using the given predicate as the comparison between elements."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByUnicodeScalarLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/ExpressibleByUnicodeScalarLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a new instance by decoding from the given decoder, when the type’s RawValue is String.  The decoder to read data from. Discussion This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.","kind":"symbol","title":"init(from:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/DataType\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new instance by decoding from the given decoder, when the type’s RawValue is String."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"CustomStringConvertible Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/CustomStringConvertible-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a proxy wrapper for the model document. ","kind":"symbol","title":"rootProxy()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/rootProxy()","interfaceLanguage":"swift"}},"summary":"Returns a proxy wrapper for the model document."},{"rawIndexableTextContent":"The sequence number of this change within the Automerge document. ","kind":"symbol","title":"seq","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Change\/seq","interfaceLanguage":"swift"}},"summary":"The sequence number of this change within the Automerge document."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"BidirectionalCollection Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/BidirectionalCollection-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/ExpressibleByExtendedGraphemeClusterLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Encodes this value into the given encoder.  The encoder to write data to. Discussion If the value fails to encode anything, encoder will encode an empty keyed container in its place. This function throws an error if any values are invalid for the given encoder’s format.","kind":"symbol","title":"encode(to:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this value into the given encoder."},{"rawIndexableTextContent":"Merges the change history from a document that shares the same model object into the current document.  A Document from a collaborator. Discussion This function requires that the current document the remote document provided have different actor IDs (that is, they originated from different calls to init(_:actor:)). It inspects the provided document for any changes that aren’t in the current document, and applies them.","kind":"symbol","title":"merge(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/merge(_:)","interfaceLanguage":"swift"}},"summary":"Merges the change history from a document that shares the same model object into the current document."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a change from the byte-buffer you provide.  An array of bytes that represents the change to be decoded.","kind":"symbol","title":"init(change:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Change\/init(change:)","interfaceLanguage":"swift"}},"summary":"Creates a change from the byte-buffer you provide."},{"rawIndexableTextContent":"Returns the maximum element in the sequence, using the given predicate as the comparison between elements.  Return Value The sequence’s maximum element if the sequence is not empty; otherwise, nil. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.  O(n), where n is the length of the sequence.","kind":"symbol","title":"max(by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/max(by:)","interfaceLanguage":"swift"}},"summary":"Returns the maximum element in the sequence, using the given predicate as the comparison between elements."},{"rawIndexableTextContent":"The index at the end of the collection of changes. ","kind":"symbol","title":"endIndex","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/endIndex","interfaceLanguage":"swift"}},"summary":"The index at the end of the collection of changes."},{"rawIndexableTextContent":"Returns the elements of the sequence, shuffled using the given generator as a source for randomness.  Return Value An array of this sequence’s elements in a shuffled order. The random number generator to use when shuffling the sequence. Discussion You use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:  O(n), where n is the length of the sequence. The algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.","kind":"symbol","title":"shuffled(using:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/shuffled(using:)","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, shuffled using the given generator as a source for randomness."},{"rawIndexableTextContent":"Inserts a list of characters at the index location you provide.  The characters to add. The index location of where to add the characters.","kind":"symbol","title":"insert(contentsOf:at:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/insert(contentsOf:at:)","interfaceLanguage":"swift"}},"summary":"Inserts a list of characters at the index location you provide."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.  Return Value true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false. A sequence to compare to this sequence. A predicate that returns true if its two arguments are equivalent; otherwise, false. Discussion At least one of the sequences must be finite. The predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold: areEquivalent(a, a) is always true. (Reflexivity) areEquivalent(a, b) implies areEquivalent(b, a). (Symmetry) If areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity) O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol","title":"elementsEqual(_:by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/elementsEqual(_:by:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."},{"rawIndexableTextContent":"Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.  Return Value An array of the elements that isIncluded allowed. A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array. Discussion In this example, filter(_:) is used to include only names shorter than five characters.  O(n), where n is the length of the sequence.","kind":"symbol","title":"filter(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/filter(_:)","interfaceLanguage":"swift"}},"summary":"Returns an array containing, in order, the elements of the sequence that satisfy the given predicate."},{"rawIndexableTextContent":"The indices that are valid for subscripting the collection, in ascending order.  Discussion A collection’s indices property can hold a strong reference to the collection itself, causing the collection to be non-uniquely referenced. If you mutate the collection while iterating over its indices, a strong reference can cause an unexpected copy of the collection. To avoid the unexpected copy, use the index(after:) method starting with startIndex to produce indices instead. ","kind":"symbol","title":"indices","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/indices","interfaceLanguage":"swift"}},"summary":"The indices that are valid for subscripting the collection, in ascending order."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"values","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Op\/values","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the commit at the index position of the change collection. ","kind":"symbol","title":"subscript(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/subscript(_:)-7xryt","interfaceLanguage":"swift"}},"summary":"Returns the commit at the index position of the change collection."},{"rawIndexableTextContent":"A wrapper around your model that a document uses to track changes the model instance.  Overview A proxy is provided to the change(message:_:) as an interface for updating your document’s model.","kind":"symbol","title":"Proxy","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy","interfaceLanguage":"swift"}},"summary":"A wrapper around your model that a document uses to track changes the model instance."},{"rawIndexableTextContent":"Returns a random element of the collection, using the given generator as a source for randomness.  Return Value A random element from the collection. If the collection is empty, the method returns nil. The random number generator to use when choosing a random element. Discussion Call randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection. The algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift.","kind":"symbol","title":"randomElement(using:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/randomElement(using:)","interfaceLanguage":"swift"}},"summary":"Returns a random element of the collection, using the given generator as a source for randomness."},{"rawIndexableTextContent":"The actor that created the change. ","kind":"symbol","title":"actor","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Change\/actor","interfaceLanguage":"swift"}},"summary":"The actor that created the change."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.  Return Value true if the sequence contains only elements that satisfy predicate; otherwise, false. A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition. Discussion The following code uses this method to test whether all the names in an array have at least five characters:  O(n), where n is the length of the sequence.","kind":"symbol","title":"allSatisfy(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/allSatisfy(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"Primitive.null","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/null","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByIntegerLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key\/ExpressibleByIntegerLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.  Return Value A sorted array of the sequence’s elements. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion When you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate. In the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.  You also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.  Calling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.  The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) The sorting algorithm is not guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order. O(n log n), where n is the length of the sequence.","kind":"symbol","title":"sorted(by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/sorted(by:)","interfaceLanguage":"swift"}},"summary":"Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."},{"rawIndexableTextContent":"Encodes this Actor into the provided encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this Actor into the provided encoder."},{"rawIndexableTextContent":"The value of the row. ","kind":"symbol","title":"value","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/Row\/value","interfaceLanguage":"swift"}},"summary":"The value of the row."},{"rawIndexableTextContent":"Returns a collection of pairs (i, x), where i represents an index of the collection, and x represents an element.  Return Value A collection of paired indices and elements of this collection. Discussion This example iterates over the indices and elements of a set, building an array consisting of indices of names with five or fewer letters.  O(1)","kind":"symbol","title":"indexed()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/indexed()","interfaceLanguage":"swift"}},"summary":"Returns a collection of pairs (i, x), where i represents an index of the collection, and x represents an element."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.  Return Value true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false. A sequence to compare to this sequence. A predicate that returns true if its two arguments are equivalent; otherwise, false. Discussion At least one of the sequences must be finite. The predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold: areEquivalent(a, a) is always true. (Reflexivity) areEquivalent(a, b) implies areEquivalent(b, a). (Symmetry) If areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity) O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol","title":"elementsEqual(_:by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/elementsEqual(_:by:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test."},{"rawIndexableTextContent":"Returns the first element of the sequence that satisfies the given predicate.  Return Value The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate. A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match. Discussion The following example uses the first(where:) method to find the first negative number in an array of integers:  O(n), where n is the length of the sequence.","kind":"symbol","title":"first(where:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/first(where:)","interfaceLanguage":"swift"}},"summary":"Returns the first element of the sequence that satisfies the given predicate."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"init(changes:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/RSBackend\/init(changes:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"hash(into:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/hash(into:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns an array containing the results of mapping the given closure over the sequence’s elements.  Return Value An array containing the transformed elements of this sequence. A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. Discussion In this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.  O(n), where n is the length of the sequence.","kind":"symbol","title":"map(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/map(_:)","interfaceLanguage":"swift"}},"summary":"Returns an array containing the results of mapping the given closure over the sequence’s elements."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"insert(contentsOf:at:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/insert(contentsOf:at:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The value of the document at this point in time. ","kind":"symbol","title":"snapshot","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Commit\/snapshot","interfaceLanguage":"swift"}},"summary":"The value of the document at this point in time."},{"rawIndexableTextContent":"Creates a new instance by decoding from the given decoder.  The decoder to read data from. Discussion This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.","kind":"symbol","title":"init(from:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ObjectId\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new instance by decoding from the given decoder."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"hashValue","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/OpAction\/hashValue","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the result of combining the elements of the sequence using the given closure.  Return Value The final accumulated value. If the sequence has no elements, the result is initialResult. The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed. A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller. Discussion Use the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product. The nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.  When numbers.reduce(_:_:) is called, the following steps occur: The nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1. The closure is called again repeatedly with the previous call’s return value and each element of the sequence. When the sequence is exhausted, the last value returned from the closure is returned to the caller. If the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:). O(n), where n is the length of the sequence.","kind":"symbol","title":"reduce(_:_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/reduce(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns the result of combining the elements of the sequence using the given closure."},{"rawIndexableTextContent":"Returns an array containing the elements of this sequence in reverse order.  Return Value An array containing the elements of this sequence in reverse order. Discussion The sequence must be finite. O(n), where n is the length of the sequence.","kind":"symbol","title":"reversed()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/reversed()","interfaceLanguage":"swift"}},"summary":"Returns an array containing the elements of this sequence in reverse order."},{"rawIndexableTextContent":"Returns the first index in which an element of the collection satisfies the given predicate.  Return Value The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil. A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match. Discussion You can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:  O(n), where n is the length of the collection.","kind":"symbol","title":"firstIndex(where:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/firstIndex(where:)","interfaceLanguage":"swift"}},"summary":"Returns the first index in which an element of the collection satisfies the given predicate."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"ExpressibleByStringLiteral Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Actor\/ExpressibleByStringLiteral-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"A list of the dependencies that this change builds upon within the Automerge document. ","kind":"symbol","title":"deps","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Change\/deps","interfaceLanguage":"swift"}},"summary":"A list of the dependencies that this change builds upon within the Automerge document."},{"rawIndexableTextContent":"Accesses a contiguous subrange of the collection’s elements.  A range of the collection’s indices. The bounds of the range must be valid indices of the collection. Overview The accessed slice uses the same indices for the same elements as the original collection. Always use the slice’s startIndex property instead of assuming that its indices start at a particular value. This example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.  O(1)","kind":"symbol","title":"subscript(_:)","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/subscript(_:)-7tlca","interfaceLanguage":"swift"}},"summary":"Accesses a contiguous subrange of the collection’s elements."},{"rawIndexableTextContent":"The first element of the collection.  Discussion If the collection is empty, the value of this property is nil. ","kind":"symbol","title":"first","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/first","interfaceLanguage":"swift"}},"summary":"The first element of the collection."},{"rawIndexableTextContent":"Replaces the given index with its predecessor.  A valid index of the collection. i must be greater than startIndex.","kind":"symbol","title":"formIndex(before:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/formIndex(before:)","interfaceLanguage":"swift"}},"summary":"Replaces the given index with its predecessor."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"formatted()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/formatted()","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Accesses the contiguous subrange of the collection’s elements specified by a range expression.  A range of the collection’s indices. The bounds of the range must be valid indices of the collection. Overview The range expression is converted to a concrete subrange relative to this collection. For example, using a PartialRangeFrom range expression with an array accesses the subrange from the start of the range expression until the end of the array.  The accessed slice uses the same indices for the same elements as the original collection uses. This example searches streetsSlice for one of the strings in the slice, and then uses that index in the original array.  Always use the slice’s startIndex property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.  O(1)","kind":"symbol","title":"subscript(_:)","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/subscript(_:)-6op4d","interfaceLanguage":"swift"}},"summary":"Accesses the contiguous subrange of the collection’s elements specified by a range expression."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.  Return Value true if this sequence and other contain the same elements in the same order. A sequence to compare to this sequence. Discussion At least one of the sequences must be finite. This example tests whether one countable range shares the same elements as another countable range and an array.  O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol","title":"elementsEqual(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/elementsEqual(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order."},{"rawIndexableTextContent":"Returns a random element of the collection.  Return Value A random element from the collection. If the collection is empty, the method returns nil. Discussion Call randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:  This method is equivalent to calling randomElement(using:), passing in the system’s default random generator. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.","kind":"symbol","title":"randomElement()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/randomElement()","interfaceLanguage":"swift"}},"summary":"Returns a random element of the collection."},{"rawIndexableTextContent":"Returns a sequence containing all but the given number of initial elements.  Return Value A sequence starting after the specified number of elements. The number of elements to drop from the beginning of the sequence. k must be greater than or equal to zero. Discussion If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.  O(1), with O(k) deferred to each iteration of the result, where k is the number of elements to drop from the beginning of the sequence.","kind":"symbol","title":"dropFirst(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/dropFirst(_:)","interfaceLanguage":"swift"}},"summary":"Returns a sequence containing all but the given number of initial elements."},{"rawIndexableTextContent":"Returns the minimum element in the sequence.  Return Value The sequence’s minimum element. If the sequence has no elements, returns nil. Discussion This example finds the smallest value in an array of height measurements.  O(n), where n is the length of the sequence.","kind":"symbol","title":"min()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/min()","interfaceLanguage":"swift"}},"summary":"Returns the minimum element in the sequence."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"Key","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Key","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Deletes the the number of characters you specify at the location you provide.  The number of characters to delete. The location to start removing the characters.","kind":"symbol","title":"delete(_:charactersAtIndex:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/delete(_:charactersAtIndex:)","interfaceLanguage":"swift"}},"summary":"Deletes the the number of characters you specify at the location you provide."},{"rawIndexableTextContent":"The index at the end of the collection. ","kind":"symbol","title":"endIndex","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Proxy\/endIndex","interfaceLanguage":"swift"}},"summary":"The index at the end of the collection."},{"rawIndexableTextContent":"Creates an instance initialized to the specified floating-point value.  The value to create. Discussion Do not call this initializer directly. Instead, initialize a variable or constant using a floating-point literal. For example:  In this example, the assignment to the x constant calls this floating-point literal initializer behind the scenes.","kind":"symbol","title":"init(floatLiteral:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Primitive\/init(floatLiteral:)","interfaceLanguage":"swift"}},"summary":"Creates an instance initialized to the specified floating-point value."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"MutableCollection Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/MutableCollection-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the maximum element in the sequence.  Return Value The sequence’s maximum element. If the sequence has no elements, returns nil. Discussion This example finds the largest value in an array of height measurements.  O(n), where n is the length of the sequence.","kind":"symbol","title":"max()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/max()","interfaceLanguage":"swift"}},"summary":"Returns the maximum element in the sequence."},{"rawIndexableTextContent":"Returns a list of byte buffers that represent the change history of the document.  Return Value A list of the changes to the document.","kind":"symbol","title":"allChanges()","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/allChanges()","interfaceLanguage":"swift"}},"summary":"Returns a list of byte buffers that represent the change history of the document."},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.  Return Value true if the sequence contains an element that satisfies predicate; otherwise, false. A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match. Discussion You can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.  Alternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.  O(n), where n is the length of the sequence.","kind":"symbol","title":"contains(where:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/contains(where:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."},{"rawIndexableTextContent":"Returns the minimum element in the sequence, using the given predicate as the comparison between elements.  Return Value The sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.  O(n), where n is the length of the sequence.","kind":"symbol","title":"min(by:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Text\/min(by:)","interfaceLanguage":"swift"}},"summary":"Returns the minimum element in the sequence, using the given predicate as the comparison between elements."}]