{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"allSatisfy"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"predicate"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the sequence contains only elements that satisfy"},{"type":"text","text":" "},{"type":"codeVoice","code":"predicate"},{"type":"text","text":"; otherwise, "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]}]},{"kind":"parameters","parameters":[{"name":"predicate","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes an element of the sequence"},{"type":"text","text":" "},{"type":"text","text":"as its argument and returns a Boolean value that indicates whether"},{"type":"text","text":" "},{"type":"text","text":"the passed element satisfies a condition."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following code uses this method to test whether all the names in an"},{"type":"text","text":" "},{"type":"text","text":"array have at least five characters:"}]},{"type":"codeListing","syntax":null,"code":["let names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"NicolÃ¡s\"]","let allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })","\/\/ allHaveAtLeastFive == true"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is the length of the sequence."}]}],"type":"aside","name":"Complexity"}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/automerge\/history\/allsatisfy(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/allSatisfy(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether every element of a sequence"},{"type":"text","text":" "},{"type":"text","text":"satisfies a given predicate."}],"kind":"symbol","metadata":{"role":"symbol","title":"allSatisfy(_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"allSatisfy"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"symbolKind":"method","externalID":"s:STsE10allSatisfyyS2b7ElementQzKXEKF::SYNTHESIZED::s:9Automerge7HistoryV","extendedModule":"Swift","modules":[{"name":"Automerge"}]},"hierarchy":{"paths":[["doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge","doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History","doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/Sequence-Implementations"]]},"references":{"doc://org.automerge.Automerge-swift/documentation/Automerge":{"role":"collection","title":"Automerge","abstract":[{"type":"text","text":"Automerge helps you build collaborative applications by tracking changes and enabling consistent merging of those changes to your models."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge","kind":"symbol","type":"topic","url":"\/documentation\/automerge"},"doc://org.automerge.Automerge-swift/documentation/Automerge/History/allSatisfy(_:)":{"role":"symbol","title":"allSatisfy(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"allSatisfy"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether every element of a sequence"},{"type":"text","text":" "},{"type":"text","text":"satisfies a given predicate."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/allSatisfy(_:)","kind":"symbol","type":"topic","url":"\/documentation\/automerge\/history\/allsatisfy(_:)"},"doc://org.automerge.Automerge-swift/documentation/Automerge/History/Sequence-Implementations":{"role":"collectionGroup","title":"Sequence Implementations","abstract":[],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History\/Sequence-Implementations","kind":"article","type":"topic","url":"\/documentation\/automerge\/history\/sequence-implementations"},"doc://org.automerge.Automerge-swift/documentation/Automerge/History":{"role":"symbol","title":"History","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"History"}],"abstract":[{"type":"text","text":"A struct that wraps a document to represent it as a collection of changes."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/History","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"History"}],"url":"\/documentation\/automerge\/history"}}}