{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contains"},{"kind":"text","text":"("},{"kind":"externalParam","text":"where"},{"kind":"text","text":" "},{"kind":"internalParam","text":"predicate"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the sequence contains an element that satisfies"},{"type":"text","text":" "},{"type":"codeVoice","code":"predicate"},{"type":"text","text":"; otherwise, "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]}]},{"kind":"parameters","parameters":[{"name":"predicate","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes an element of the sequence"},{"type":"text","text":" "},{"type":"text","text":"as its argument and returns a Boolean value that indicates whether"},{"type":"text","text":" "},{"type":"text","text":"the passed element represents a match."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the predicate to check for an element of a type that"},{"type":"text","text":" "},{"type":"text","text":"doesnâ€™t conform to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol, such as the"},{"type":"text","text":" "},{"type":"codeVoice","code":"HTTPResponse"},{"type":"text","text":" enumeration in this example."}]},{"type":"codeListing","syntax":null,"code":["enum HTTPResponse {","    case ok","    case error(Int)","}","","let lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]","let hadError = lastThreeResponses.contains { element in","    if case .error = element {","        return true","    } else {","        return false","    }","}","\/\/ 'hadError' == true"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, a predicate can be satisfied by a range of "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" "},{"type":"text","text":"elements or a general condition. This example shows how you can check an"},{"type":"text","text":" "},{"type":"text","text":"array for an expense greater than $100."}]},{"type":"codeListing","syntax":null,"code":["let expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]","let hasBigPurchase = expenses.contains { $0 > 100 }","\/\/ 'hasBigPurchase' == true"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is the length of the sequence."}]}],"type":"aside","name":"Complexity"}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/automerge\/table\/contains(where:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/contains(where:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence contains an"},{"type":"text","text":" "},{"type":"text","text":"element that satisfies the given predicate."}],"kind":"symbol","metadata":{"role":"symbol","title":"contains(where:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contains"},{"kind":"text","text":"("},{"kind":"externalParam","text":"where"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"symbolKind":"method","externalID":"s:STsE8contains5whereS2b7ElementQzKXE_tKF::SYNTHESIZED::s:9Automerge5TableV","extendedModule":"Swift","modules":[{"name":"Automerge"}]},"hierarchy":{"paths":[["doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge","doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table","doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/Sequence-Implementations"]]},"references":{"doc://org.automerge.Automerge-swift/documentation/Automerge/Table/contains(where:)":{"role":"symbol","title":"contains(where:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"contains"},{"kind":"text","text":"("},{"kind":"externalParam","text":"where"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence contains an"},{"type":"text","text":" "},{"type":"text","text":"element that satisfies the given predicate."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/contains(where:)","kind":"symbol","type":"topic","url":"\/documentation\/automerge\/table\/contains(where:)"},"doc://org.automerge.Automerge-swift/documentation/Automerge":{"role":"collection","title":"Automerge","abstract":[{"type":"text","text":"Automerge helps you build collaborative applications by tracking changes and enabling consistent merging of those changes to your models."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge","kind":"symbol","type":"topic","url":"\/documentation\/automerge"},"doc://org.automerge.Automerge-swift/documentation/Automerge/Table":{"role":"symbol","title":"Table","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Table"}],"abstract":[{"type":"text","text":"A data structure that represents a table of rows."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Table"}],"url":"\/documentation\/automerge\/table"},"doc://org.automerge.Automerge-swift/documentation/Automerge/Table/Sequence-Implementations":{"role":"collectionGroup","title":"Sequence Implementations","abstract":[],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Table\/Sequence-Implementations","kind":"article","type":"topic","url":"\/documentation\/automerge\/table\/sequence-implementations"}}}