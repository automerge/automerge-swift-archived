{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following content walks you through creating a model that collaborators update."},{"type":"text","text":" "},{"type":"text","text":"With your model, you create an Automerge document, update that document, and inspect it."},{"type":"text","text":" "},{"type":"text","text":"Then you can replicate the document to represent another collaborator, update the two models independently, and merge the results."},{"type":"text","text":" "},{"type":"text","text":"The content then shows how to get and display the change history for your model that is encoded into the Automerge document."}]},{"anchor":"Creating-a-Model-for-Automerge","level":3,"type":"heading","text":"Creating a Model for Automerge"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Automerge expects its documents to have a model."},{"type":"text","text":" "},{"type":"text","text":"Make your document’s model a codable struct, but do not provide any custom "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" protocol implementations or custom "},{"type":"codeVoice","code":"CodingKeys"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["import Automerge","\/\/ Define your model object, which will be stored in ","\/\/ automerge.","","\/\/ Don't provide custom Codable implementations or ","\/\/ custom CodingKeys. ","struct Cards: Codable {","  var cards: [Card]","}","struct Card: Codable {","  let title: String","  var done: Bool","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With your model defined, create a document with an initial value for your model."},{"type":"text","text":" "},{"type":"text","text":"The following snippet creates a document named "},{"type":"codeVoice","code":"doc1"},{"type":"text","text":" that contains an empty list of cards:"}]},{"type":"codeListing","syntax":"swift","code":["var doc1 = Automerge.Document(Cards(cards: []))"]},{"anchor":"Updating-your-Model-through-the-Automerge-Document","level":3,"type":"heading","text":"Updating your Model through the Automerge Document"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Treat your document an an immutable view of your current model’s state."},{"type":"text","text":" "},{"type":"text","text":"To change a document, call the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/change(message:_:)"},{"type":"text","text":" method with a closure, and update your model’s state within that closure."},{"type":"text","text":" "},{"type":"text","text":"You can also include a human-readable description of the change, similar to a commit message, which automerge stores in the change history."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following snippet shows an example of adding a new card into your document:"}]},{"type":"codeListing","syntax":"swift","code":["doc1.change(message: \"Add card\") { doc in ","    doc.cards.append(","        Card(title: \"Rewrite everything in Obj-C\",","             done: false)","    )","}","\/\/ Now the state of doc1 is:","\/\/ { cards: [ ","\/\/   { ","\/\/     title: 'Rewrite everything in Obj-C', ","\/\/     done: false ","\/\/   }","\/\/ ] }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you use a list in your model, you can use all the methods provided by "},{"type":"codeVoice","code":"RangeReplacableCollection"},{"type":"text","text":" on that list within the closure."},{"type":"text","text":" "},{"type":"text","text":"For example, the following code snippet adds an additional card using the "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["doc1.change(message: \"Add card\") { doc in ","    doc.cards.insert(","        Card(title: \"Rewrite everything in Swift\", ","             done: false), ","        at: 0)","}","","\/\/ Now the state of doc1 is:","\/\/ { cards:","\/\/    [ { title: 'Rewrite everything in Swift', ","\/\/        done: false },","\/\/      { title: 'Rewrite everything in Obj-C', ","\/\/        done: false } ] }"]},{"anchor":"Sharing-Automerge-Documents-between-Collaborators","level":3,"type":"heading","text":"Sharing Automerge Documents between Collaborators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To simulate a collaborator working on the same document, create a new document from your document’s change history, as shown in the following snippet:"}]},{"type":"codeListing","syntax":"swift","code":["var doc2 = Document(changes: doc1.allChanges())","\/\/doc2 has a copy of all the cards in doc1."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now you can make changes in each document indepdendently."},{"type":"text","text":" "},{"type":"text","text":"The following code snippet shows updating one of the cards in the first document, and removing that same card in the second document:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Now make a change on device 1:","doc1.change(message: \"Mark card as done\") { doc in ","    doc.cards[0].done.set(true)","}","","\/\/ doc1 state:","\/\/ { cards:","\/\/    [ { title: 'Rewrite everything in Swift', ","\/\/        done: true },","\/\/      { title: 'Rewrite everything in Obj-C', ","\/\/        done: false } ] }","","doc2.change(message: \"Delete card\") { doc in ","    doc.cards.remove(at: 1)","}","\/\/ doc2 state:","\/\/ { cards: [ { title: 'Rewrite everything in Swift', ","\/\/              done: false } ] }"]},{"anchor":"Merging-Changes-Between-Collaborators","level":3,"type":"heading","text":"Merging Changes Between Collaborators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Automerge provides the mechanisms to consistently merge changes, including those changes that would normally appear to conflict."},{"type":"text","text":" "},{"type":"text","text":"The following example shows merging the changes from the second document back into the first:"}]},{"type":"codeListing","syntax":"swift","code":["doc1.merge(doc2)","","\/\/ doc1 state:","\/\/ { cards: [ { title: 'Rewrite everything in Swift', ","\/\/              done: true } ] }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can merge documents in a either direction, and automerge returns the same resulting state."},{"type":"text","text":" "},{"type":"text","text":"The merged result includes the history that the card labeled ‘Rewrite everything in Swift’ was set to true, and the card ‘Rewrite everything in Obj-C’ was deleted."}]},{"anchor":"Displaying-the-Change-History-of-an-Automerge-Document","level":3,"type":"heading","text":"Displaying the Change History of an Automerge Document"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also inspect the details of the change history associated with a document."},{"type":"text","text":" "},{"type":"text","text":"Automerge keeps track of all changes, along with any messages that included when "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/change(message:_:)"},{"type":"text","text":" was called."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you query that history, it the changes you made locally and any changes that you merged in from collaborators."},{"type":"text","text":" "},{"type":"text","text":"The change history also provides a snapshot of your model’s state at any point in the change history."},{"type":"text","text":" "},{"type":"text","text":"The following example uses "},{"type":"codeVoice","code":"map"},{"type":"text","text":" to iterate through the change history and count how many cards existed at each change:"}]},{"type":"codeListing","syntax":"swift","code":["History(doc1).map { ($0.change.message, $0.snapshot.cards.count) }","\/\/ [ ('Initialization', 0),","\/\/   ('Add card', 1),","\/\/   ('Add another card', 2),","\/\/   ('Mark card as done', 2),","\/\/   ('Delete card', 1)","\/\/  ]"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/automerge\/automergebasics"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/AutomergeBasics","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Getting started using Automerge in your app."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Automerge Basics","role":"article","modules":[{"name":"Automerge"}]},"hierarchy":{"paths":[["doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge"]]},"seeAlsoSections":[{"title":"Getting Started","identifiers":["doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ConflictingChanges"],"generated":true}],"references":{"doc://org.automerge.Automerge-swift/documentation/Automerge":{"role":"collection","title":"Automerge","abstract":[{"type":"text","text":"Automerge helps you build collaborative applications by tracking changes and enabling consistent merging of those changes to your models."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge","kind":"symbol","type":"topic","url":"\/documentation\/automerge"},"doc://org.automerge.Automerge-swift/documentation/Automerge/Document/change(message:_:)":{"role":"symbol","title":"change(message:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"change"},{"kind":"text","text":"("},{"kind":"externalParam","text":"message"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"Proxy","preciseIdentifier":"s:9Automerge5ProxyC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:9Automerge8DocumentV1Txmfp"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Request","preciseIdentifier":"s:9Automerge7RequestV"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Provide updates to the document by changing your model object within the provided closure."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/Document\/change(message:_:)","kind":"symbol","type":"topic","url":"\/documentation\/automerge\/document\/change(message:_:)"},"doc://org.automerge.Automerge-swift/documentation/Automerge/ConflictingChanges":{"role":"article","title":"Conflicts in the Change History","abstract":[{"type":"text","text":"Expose and highlight conflicting changes within a document."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/ConflictingChanges","kind":"article","type":"topic","url":"\/documentation\/automerge\/conflictingchanges"}}}