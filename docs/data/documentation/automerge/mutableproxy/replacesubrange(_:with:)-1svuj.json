{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"public"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceSubrange"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"subrange"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R","preciseIdentifier":"s:9Automerge12MutableProxyCAASmRzSe7ElementRpzSEAERQSi5IndexRtzlE15replaceSubrange_4withyqd_0__qd__tSlRd__SXRd_0_ACyAEGADRtd__Si5BoundRtd_0_r0_lF1RL_qd_0_mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"with"},{"kind":"text","text":" "},{"kind":"internalParam","text":"proxyElements"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C","preciseIdentifier":"s:9Automerge12MutableProxyCAASmRzSe7ElementRpzSEAERQSi5IndexRtzlE15replaceSubrange_4withyqd_0__qd__tSlRd__SXRd_0_ACyAEGADRtd__Si5BoundRtd_0_r0_lF1CL_qd__mfp"},{"kind":"text","text":") "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Collection","preciseIdentifier":"s:Sl"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"RangeExpression","preciseIdentifier":"s:SX"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy","preciseIdentifier":"s:9Automerge12MutableProxyC","text":"MutableProxy"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"subrange","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The subrange of the collection to replace. The bounds of"},{"type":"text","text":" "},{"type":"text","text":"the range must be valid indices of the collection."}]}]},{"name":"newElements","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The new elements to add to the collection."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method has the effect of removing the specified range of elements"},{"type":"text","text":" "},{"type":"text","text":"from the collection and inserting the new elements at the same location."},{"type":"text","text":" "},{"type":"text","text":"The number of new elements need not match the number of elements being"},{"type":"text","text":" "},{"type":"text","text":"removed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, three elements in the middle of an array of integers are"},{"type":"text","text":" "},{"type":"text","text":"replaced by the five elements of a "},{"type":"codeVoice","code":"Repeated<Int>"},{"type":"text","text":" instance."}]},{"type":"codeListing","syntax":null,"code":[" var nums = [10, 20, 30, 40, 50]"," nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))"," print(nums)"," \/\/ Prints \"[10, 1, 1, 1, 1, 1, 50]\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you pass a zero-length range as the "},{"type":"codeVoice","code":"subrange"},{"type":"text","text":" parameter, this method"},{"type":"text","text":" "},{"type":"text","text":"inserts the elements of "},{"type":"codeVoice","code":"newElements"},{"type":"text","text":" at "},{"type":"codeVoice","code":"subrange.startIndex"},{"type":"text","text":". Calling"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"insert(contentsOf:at:)"},{"type":"text","text":" method instead is preferred."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Likewise, if you pass a zero-length collection as the "},{"type":"codeVoice","code":"newElements"},{"type":"text","text":" "},{"type":"text","text":"parameter, this method removes the elements in the given subrange"},{"type":"text","text":" "},{"type":"text","text":"without replacement. Calling the "},{"type":"codeVoice","code":"removeSubrange(_:)"},{"type":"text","text":" method instead is"},{"type":"text","text":" "},{"type":"text","text":"preferred."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling this method may invalidate any existing indices for use with this"},{"type":"text","text":" "},{"type":"text","text":"collection."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" + "},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is length of this collection and"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"type":"text","text":" is the length of "},{"type":"codeVoice","code":"newElements"},{"type":"text","text":". If the call to this method simply"},{"type":"text","text":" "},{"type":"text","text":"appends the contents of "},{"type":"codeVoice","code":"newElements"},{"type":"text","text":" to the collection, this method is"},{"type":"text","text":" "},{"type":"text","text":"equivalent to "},{"type":"codeVoice","code":"append(contentsOf:)"},{"type":"text","text":"."}]}],"type":"aside","name":"Complexity"}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/automerge\/mutableproxy\/replacesubrange(_:with:)-1svuj"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/replaceSubrange(_:with:)-1svuj","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Replaces the specified subrange of elements with the given collection."}],"kind":"symbol","metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Wrapped.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":", "},{"type":"codeVoice","code":"Wrapped.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Wrapped.Index"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"replaceSubrange(_:with:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceSubrange"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"R","preciseIdentifier":"s:9Automerge12MutableProxyCAASmRzSe7ElementRpzSEAERQSi5IndexRtzlE15replaceSubrange_4withyqd_0__qd__tSlRd__SXRd_0_ACyAEGADRtd__Si5BoundRtd_0_r0_lF1RL_qd_0_mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C","preciseIdentifier":"s:9Automerge12MutableProxyCAASmRzSe7ElementRpzSEAERQSi5IndexRtzlE15replaceSubrange_4withyqd_0__qd__tSlRd__SXRd_0_ACyAEGADRtd__Si5BoundRtd_0_r0_lF1CL_qd__mfp"},{"kind":"text","text":")"}],"symbolKind":"method","externalID":"s:9Automerge12MutableProxyCAASmRzSe7ElementRpzSEAERQSi5IndexRtzlE15replaceSubrange_4withyqd_0__qd__tSlRd__SXRd_0_ACyAEGADRtd__Si5BoundRtd_0_r0_lF","extendedModule":"Automerge","modules":[{"name":"Automerge"}]},"hierarchy":{"paths":[["doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge","doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy","doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/RangeReplaceableCollection-Implementations"]]},"references":{"doc://org.automerge.Automerge-swift/documentation/Automerge/MutableProxy":{"role":"symbol","title":"MutableProxy","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutableProxy"}],"abstract":[{"type":"text","text":"A mutable wrapper around your model."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MutableProxy"}],"url":"\/documentation\/automerge\/mutableproxy"},"doc://org.automerge.Automerge-swift/documentation/Automerge":{"role":"collection","title":"Automerge","abstract":[{"type":"text","text":"Automerge helps you build collaborative applications by tracking changes and enabling consistent merging of those changes to your models."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge","kind":"symbol","type":"topic","url":"\/documentation\/automerge"},"doc://org.automerge.Automerge-swift/documentation/Automerge/MutableProxy/replaceSubrange(_:with:)-1svuj":{"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Wrapped.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":", "},{"type":"codeVoice","code":"Wrapped.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Wrapped.Index"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"replaceSubrange(_:with:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceSubrange"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"R","preciseIdentifier":"s:9Automerge12MutableProxyCAASmRzSe7ElementRpzSEAERQSi5IndexRtzlE15replaceSubrange_4withyqd_0__qd__tSlRd__SXRd_0_ACyAEGADRtd__Si5BoundRtd_0_r0_lF1RL_qd_0_mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C","preciseIdentifier":"s:9Automerge12MutableProxyCAASmRzSe7ElementRpzSEAERQSi5IndexRtzlE15replaceSubrange_4withyqd_0__qd__tSlRd__SXRd_0_ACyAEGADRtd__Si5BoundRtd_0_r0_lF1CL_qd__mfp"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Replaces the specified subrange of elements with the given collection."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/replaceSubrange(_:with:)-1svuj","kind":"symbol","type":"topic","url":"\/documentation\/automerge\/mutableproxy\/replacesubrange(_:with:)-1svuj"},"doc://org.automerge.Automerge-swift/documentation/Automerge/MutableProxy/RangeReplaceableCollection-Implementations":{"role":"collectionGroup","title":"RangeReplaceableCollection Implementations","abstract":[],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/RangeReplaceableCollection-Implementations","kind":"article","type":"topic","url":"\/documentation\/automerge\/mutableproxy\/rangereplaceablecollection-implementations"}}}