{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"public"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"n"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"n","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The requested number of elements to store."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are adding a known number of elements to a collection, use this"},{"type":"text","text":" "},{"type":"text","text":"method to avoid multiple reallocations. A type that conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":" can choose how to respond when this method"},{"type":"text","text":" "},{"type":"text","text":"is called. Depending on the type, it may make sense to allocate more or"},{"type":"text","text":" "},{"type":"text","text":"less storage than requested, or to take no action at all."}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/automerge\/mutableproxy\/reservecapacity(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/reserveCapacity(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Prepares the collection to store the specified number of elements, when"},{"type":"text","text":" "},{"type":"text","text":"doing so is appropriate for the underlying type."}],"kind":"symbol","metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Wrapped.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":", "},{"type":"codeVoice","code":"Wrapped.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Wrapped.Index"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"reserveCapacity(_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"symbolKind":"method","externalID":"s:9Automerge12MutableProxyCAASmRzSe7ElementRpzSEAERQSi5IndexRtzlE15reserveCapacityyySiF","extendedModule":"Automerge","modules":[{"name":"Automerge"}]},"hierarchy":{"paths":[["doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge","doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy","doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/RangeReplaceableCollection-Implementations"]]},"references":{"doc://org.automerge.Automerge-swift/documentation/Automerge":{"role":"collection","title":"Automerge","abstract":[{"type":"text","text":"Automerge helps you build collaborative applications by tracking changes and enabling consistent merging of those changes to your models."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge","kind":"symbol","type":"topic","url":"\/documentation\/automerge"},"doc://org.automerge.Automerge-swift/documentation/Automerge/MutableProxy":{"role":"symbol","title":"MutableProxy","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutableProxy"}],"abstract":[{"type":"text","text":"A mutable wrapper around your model."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MutableProxy"}],"url":"\/documentation\/automerge\/mutableproxy"},"doc://org.automerge.Automerge-swift/documentation/Automerge/MutableProxy/reserveCapacity(_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Wrapped.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":", "},{"type":"codeVoice","code":"Wrapped.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Wrapped.Index"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"reserveCapacity(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Prepares the collection to store the specified number of elements, when"},{"type":"text","text":" "},{"type":"text","text":"doing so is appropriate for the underlying type."}],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/reserveCapacity(_:)","kind":"symbol","type":"topic","url":"\/documentation\/automerge\/mutableproxy\/reservecapacity(_:)"},"doc://org.automerge.Automerge-swift/documentation/Automerge/MutableProxy/RangeReplaceableCollection-Implementations":{"role":"collectionGroup","title":"RangeReplaceableCollection Implementations","abstract":[],"identifier":"doc:\/\/org.automerge.Automerge-swift\/documentation\/Automerge\/MutableProxy\/RangeReplaceableCollection-Implementations","kind":"article","type":"topic","url":"\/documentation\/automerge\/mutableproxy\/rangereplaceablecollection-implementations"}}}