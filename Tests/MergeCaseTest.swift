//
//  MergeCaseTest.swift
//  
//
//  Created by Adam Wulf on 4/28/21.
//

import Foundation
import XCTest
@testable import Automerge

// MARK: - Automerge Models

struct Tint: Equatable, Codable {
    let red, green, blue, opacity: CGFloat
    static var random: Tint {
        Tint(red: .random(in: 0...1), green: .random(in: 0...1), blue: .random(in: 0...1), opacity: 1)
    }
    static var black: Tint {
        Tint(red: 0, green: 0, blue: 0, opacity: 1)
    }
    var uiColor: NSColor {
        NSColor(displayP3Red: red, green: green, blue: blue, alpha: opacity)
    }
}

struct AMCard: Codable {
    let id: String
    var center: CGPoint
    var translation: CGVector
    var size: CGSize
    var z: Int
    var tint: Tint

    init(id: String = UUID().uuidString, center: CGPoint, translation: CGVector, size: CGSize, z: Int, tint: Tint) {
        self.id = id
        self.center = center
        self.translation = translation
        self.size = size
        self.z = z
        self.tint = tint
    }
}

struct AMBoard: Codable {
    let id: String
    var cards: [AMCard]

    init(id: String = UUID().uuidString, cards: [AMCard]) {
        self.id = id
        self.cards = cards
    }
}

class MergeCaseTest: XCTestCase {
    func testExample() throws {
        let id = "83621745-0F66-4F42-BEC2-95697B0FBA28"
        let center = CGPoint(x: 212.0, y: 355.0)
        let size = CGSize(width: 93.0, height: 122.0)
        let tint = Tint(red: 0.04607658198660225, green: 0.49460581464647846, blue: 0.02326815748005262, opacity: 1.0)
        let z = 1

        var firstModel = Document(AMBoard(id: id, cards: []))
        let newCard = AMCard(center: center, translation: .zero, size: size, z: z, tint: tint)
        firstModel.change { (proxy) in
            proxy.cards.append(newCard)
        }

        XCTAssertEqual(firstModel.content.cards.count, 1)

        // Test apply(changes:), try two different empty documents. Sometimes only one of the empty documents will fail
        var applyModel1 = Document(AMBoard(id: id, cards: []))
        applyModel1.apply(changes: firstModel.allChanges())
        XCTAssertEqual(applyModel1.content.cards.count, 1)

        var applyModel2 = Document(AMBoard(id: id, cards: []))
        applyModel2.apply(changes: firstModel.allChanges())
        XCTAssertEqual(applyModel2.content.cards.count, 1)

        // Test .merge() with two different empty documents. Sometimes only one of these will fail, sometimes both, sometimes neither.
        var mergeModel1 = Document(AMBoard(id: id, cards: []))
        mergeModel1.merge(firstModel)
        XCTAssertEqual(mergeModel1.content.cards.count, 1)

        var mergeModel2 = Document(AMBoard(id: id, cards: []))
        mergeModel2.merge(firstModel)
        XCTAssertEqual(mergeModel2.content.cards.count, 1)
    }

    /// This test uses Document data and changes data from a failed run of the above `testExample` test case. This test will always fail consistently
    func testApplyFailedPatch() throws {
        let data: [UInt8] = [133, 111, 74, 131, 62, 225, 6, 230, 1, 109, 16, 93, 68, 133, 206, 177, 170, 71, 30, 156, 158, 110, 246, 206, 101, 94, 219, 1, 1, 193, 238, 171, 132, 6, 14, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 0, 0, 13, 10, 126, 2, 105, 100, 5, 99, 97, 114, 100, 115, 28, 1, 2, 34, 3, 126, 1, 2, 46, 4, 126, 198, 4, 0, 47, 36, 56, 51, 54, 50, 49, 55, 52, 53, 45, 48, 70, 54, 54, 45, 52, 70, 52, 50, 45, 66, 69, 67, 50, 45, 57, 53, 54, 57, 55, 66, 48, 70, 66, 65, 50, 56, 56, 2, 2, 0]
        let changes: [[UInt8]] = [[133, 111, 74, 131, 106, 150, 145, 148, 1, 109, 16, 93, 68, 133, 206, 177, 170, 71, 30, 156, 158, 110, 246, 206, 101, 94, 219, 1, 1, 193, 238, 171, 132, 6, 14, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 0, 0, 13, 10, 126, 5, 99, 97, 114, 100, 115, 2, 105, 100, 28, 1, 2, 34, 3, 126, 2, 1, 46, 4, 126, 0, 198, 4, 47, 36, 56, 51, 54, 50, 49, 55, 52, 53, 45, 48, 70, 54, 54, 45, 52, 70, 52, 50, 45, 66, 69, 67, 50, 45, 57, 53, 54, 57, 55, 66, 48, 70, 66, 65, 50, 56, 56, 2, 2, 0], [133, 111, 74, 131, 197, 27, 245, 223, 1, 194, 2, 16, 93, 68, 133, 206, 177, 170, 71, 30, 156, 158, 110, 246, 206, 101, 94, 219, 2, 3, 193, 238, 171, 132, 6, 0, 0, 1, 106, 150, 145, 148, 221, 216, 115, 198, 233, 230, 123, 139, 184, 228, 154, 125, 254, 41, 155, 219, 186, 38, 29, 209, 216, 60, 136, 122, 236, 76, 132, 83, 1, 2, 17, 0, 2, 19, 126, 1, 3, 2, 4, 2, 3, 2, 8, 127, 3, 4, 11, 127, 3, 2, 16, 127, 3, 9, 14, 0, 3, 127, 0, 0, 3, 127, 0, 0, 7, 127, 0, 0, 1, 11, 19, 127, 0, 0, 1, 126, 0, 5, 0, 2, 126, 123, 9, 0, 6, 126, 119, 17, 0, 1, 13, 69, 0, 1, 127, 6, 99, 101, 110, 116, 101, 114, 0, 2, 126, 2, 105, 100, 4, 115, 105, 122, 101, 0, 2, 122, 4, 116, 105, 110, 116, 4, 98, 108, 117, 101, 5, 103, 114, 101, 101, 110, 7, 111, 112, 97, 99, 105, 116, 121, 3, 114, 101, 100, 11, 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 0, 2, 127, 1, 122, 28, 9, 0, 1, 1, 2, 2, 2, 6, 2, 1, 34, 17, 126, 0, 2, 3, 1, 127, 2, 2, 1, 127, 0, 4, 1, 127, 2, 3, 1, 46, 22, 2, 0, 2, 35, 126, 198, 4, 0, 2, 19, 127, 0, 2, 133, 1, 125, 19, 133, 1, 0, 3, 19, 47, 70, 212, 1, 227, 2, 51, 54, 56, 52, 48, 66, 50, 51, 45, 65, 52, 66, 49, 45, 52, 51, 65, 56, 45, 66, 54, 69, 68, 45, 51, 57, 70, 66, 56, 53, 49, 49, 51, 52, 66, 57, 93, 122, 192, 246, 168, 157, 155, 211, 151, 63, 36, 91, 148, 37, 159, 167, 223, 63, 1, 0, 227, 124, 137, 89, 151, 167, 63, 0, 0, 1, 56, 2, 17, 0]]
        var firstModel = Document<AMBoard>(data: data)

        XCTAssertEqual(firstModel.content.cards.count, 0)

        firstModel.apply(changes: changes)

        XCTAssertEqual(firstModel.content.cards.count, 1)
    }

    /// This test uses Document data and changes data from a failed run of the above `testExample` test case. This test will always fail consistently
    func testApplySuccessfulPatch() throws {
        let data: [UInt8] = [133, 111, 74, 131, 10, 79, 238, 3, 1, 109, 16, 1, 147, 3, 214, 105, 107, 74, 154, 168, 204, 25, 109, 108, 14, 157, 168, 1, 1, 149, 235, 171, 132, 6, 14, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 0, 0, 13, 10, 126, 5, 99, 97, 114, 100, 115, 2, 105, 100, 28, 1, 2, 34, 3, 126, 2, 1, 46, 4, 126, 0, 198, 4, 47, 36, 56, 51, 54, 50, 49, 55, 52, 53, 45, 48, 70, 54, 54, 45, 52, 70, 52, 50, 45, 66, 69, 67, 50, 45, 57, 53, 54, 57, 55, 66, 48, 70, 66, 65, 50, 56, 56, 2, 2, 0]
        let changes: [[UInt8]] = [[133, 111, 74, 131, 138, 0, 9, 178, 1, 109, 16, 24, 52, 230, 23, 79, 196, 76, 144, 167, 58, 149, 68, 132, 48, 24, 188, 1, 1, 149, 235, 171, 132, 6, 14, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 0, 0, 13, 10, 126, 5, 99, 97, 114, 100, 115, 2, 105, 100, 28, 1, 2, 34, 3, 126, 2, 1, 46, 4, 126, 0, 198, 4, 47, 36, 56, 51, 54, 50, 49, 55, 52, 53, 45, 48, 70, 54, 54, 45, 52, 70, 52, 50, 45, 66, 69, 67, 50, 45, 57, 53, 54, 57, 55, 66, 48, 70, 66, 65, 50, 56, 56, 2, 2, 0], [133, 111, 74, 131, 89, 131, 122, 27, 1, 194, 2, 16, 24, 52, 230, 23, 79, 196, 76, 144, 167, 58, 149, 68, 132, 48, 24, 188, 2, 3, 149, 235, 171, 132, 6, 0, 0, 1, 138, 0, 9, 178, 56, 246, 107, 182, 130, 251, 1, 248, 228, 152, 140, 162, 73, 7, 88, 201, 166, 209, 249, 22, 242, 45, 181, 78, 77, 10, 159, 193, 1, 2, 17, 0, 2, 19, 126, 1, 3, 2, 4, 2, 3, 2, 8, 127, 3, 4, 11, 127, 3, 2, 16, 127, 3, 9, 14, 0, 3, 127, 0, 0, 3, 127, 0, 0, 7, 127, 0, 0, 1, 11, 19, 127, 0, 0, 1, 126, 0, 5, 0, 2, 126, 123, 9, 0, 6, 126, 119, 17, 0, 1, 13, 69, 0, 1, 127, 6, 99, 101, 110, 116, 101, 114, 0, 2, 126, 2, 105, 100, 4, 115, 105, 122, 101, 0, 2, 122, 4, 116, 105, 110, 116, 4, 98, 108, 117, 101, 5, 103, 114, 101, 101, 110, 7, 111, 112, 97, 99, 105, 116, 121, 3, 114, 101, 100, 11, 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 0, 2, 127, 1, 122, 28, 9, 0, 1, 1, 2, 2, 2, 6, 2, 1, 34, 17, 126, 0, 2, 3, 1, 127, 2, 2, 1, 127, 0, 4, 1, 127, 2, 3, 1, 46, 22, 2, 0, 2, 35, 126, 198, 4, 0, 2, 19, 127, 0, 2, 133, 1, 125, 19, 133, 1, 0, 3, 19, 47, 70, 212, 1, 227, 2, 70, 48, 56, 49, 69, 56, 67, 68, 45, 52, 49, 52, 53, 45, 52, 51, 49, 50, 45, 66, 48, 66, 51, 45, 66, 51, 57, 49, 57, 54, 50, 57, 68, 51, 65, 49, 93, 122, 192, 246, 168, 157, 155, 211, 151, 63, 36, 91, 148, 37, 159, 167, 223, 63, 1, 0, 227, 124, 137, 89, 151, 167, 63, 0, 0, 1, 56, 2, 17, 0]]
        var firstModel = Document<AMBoard>(data: data)

        XCTAssertEqual(firstModel.content.cards.count, 0)

        firstModel.apply(changes: changes)

        XCTAssertEqual(firstModel.content.cards.count, 1)
    }

    /// This test uses Document data and changes data from a failed run of the above `testExample` test case. This test will always fail consistently
    func testFailedDocSuccessfulChanges() throws {
        let data: [UInt8] = [133, 111, 74, 131, 62, 225, 6, 230, 1, 109, 16, 93, 68, 133, 206, 177, 170, 71, 30, 156, 158, 110, 246, 206, 101, 94, 219, 1, 1, 193, 238, 171, 132, 6, 14, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 0, 0, 13, 10, 126, 2, 105, 100, 5, 99, 97, 114, 100, 115, 28, 1, 2, 34, 3, 126, 1, 2, 46, 4, 126, 198, 4, 0, 47, 36, 56, 51, 54, 50, 49, 55, 52, 53, 45, 48, 70, 54, 54, 45, 52, 70, 52, 50, 45, 66, 69, 67, 50, 45, 57, 53, 54, 57, 55, 66, 48, 70, 66, 65, 50, 56, 56, 2, 2, 0]
        let changes: [[UInt8]] = [[133, 111, 74, 131, 138, 0, 9, 178, 1, 109, 16, 24, 52, 230, 23, 79, 196, 76, 144, 167, 58, 149, 68, 132, 48, 24, 188, 1, 1, 149, 235, 171, 132, 6, 14, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 0, 0, 13, 10, 126, 5, 99, 97, 114, 100, 115, 2, 105, 100, 28, 1, 2, 34, 3, 126, 2, 1, 46, 4, 126, 0, 198, 4, 47, 36, 56, 51, 54, 50, 49, 55, 52, 53, 45, 48, 70, 54, 54, 45, 52, 70, 52, 50, 45, 66, 69, 67, 50, 45, 57, 53, 54, 57, 55, 66, 48, 70, 66, 65, 50, 56, 56, 2, 2, 0], [133, 111, 74, 131, 89, 131, 122, 27, 1, 194, 2, 16, 24, 52, 230, 23, 79, 196, 76, 144, 167, 58, 149, 68, 132, 48, 24, 188, 2, 3, 149, 235, 171, 132, 6, 0, 0, 1, 138, 0, 9, 178, 56, 246, 107, 182, 130, 251, 1, 248, 228, 152, 140, 162, 73, 7, 88, 201, 166, 209, 249, 22, 242, 45, 181, 78, 77, 10, 159, 193, 1, 2, 17, 0, 2, 19, 126, 1, 3, 2, 4, 2, 3, 2, 8, 127, 3, 4, 11, 127, 3, 2, 16, 127, 3, 9, 14, 0, 3, 127, 0, 0, 3, 127, 0, 0, 7, 127, 0, 0, 1, 11, 19, 127, 0, 0, 1, 126, 0, 5, 0, 2, 126, 123, 9, 0, 6, 126, 119, 17, 0, 1, 13, 69, 0, 1, 127, 6, 99, 101, 110, 116, 101, 114, 0, 2, 126, 2, 105, 100, 4, 115, 105, 122, 101, 0, 2, 122, 4, 116, 105, 110, 116, 4, 98, 108, 117, 101, 5, 103, 114, 101, 101, 110, 7, 111, 112, 97, 99, 105, 116, 121, 3, 114, 101, 100, 11, 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 0, 2, 127, 1, 122, 28, 9, 0, 1, 1, 2, 2, 2, 6, 2, 1, 34, 17, 126, 0, 2, 3, 1, 127, 2, 2, 1, 127, 0, 4, 1, 127, 2, 3, 1, 46, 22, 2, 0, 2, 35, 126, 198, 4, 0, 2, 19, 127, 0, 2, 133, 1, 125, 19, 133, 1, 0, 3, 19, 47, 70, 212, 1, 227, 2, 70, 48, 56, 49, 69, 56, 67, 68, 45, 52, 49, 52, 53, 45, 52, 51, 49, 50, 45, 66, 48, 66, 51, 45, 66, 51, 57, 49, 57, 54, 50, 57, 68, 51, 65, 49, 93, 122, 192, 246, 168, 157, 155, 211, 151, 63, 36, 91, 148, 37, 159, 167, 223, 63, 1, 0, 227, 124, 137, 89, 151, 167, 63, 0, 0, 1, 56, 2, 17, 0]]
        var firstModel = Document<AMBoard>(data: data)

        XCTAssertEqual(firstModel.content.cards.count, 0)

        firstModel.apply(changes: changes)

        XCTAssertEqual(firstModel.content.cards.count, 1)
    }

    /// This test uses Document data and changes data from a failed run of the above `testExample` test case. This test will always fail consistently
    func testSuccessfulDocFailedChanges() throws {
        let data: [UInt8] = [133, 111, 74, 131, 10, 79, 238, 3, 1, 109, 16, 1, 147, 3, 214, 105, 107, 74, 154, 168, 204, 25, 109, 108, 14, 157, 168, 1, 1, 149, 235, 171, 132, 6, 14, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 0, 0, 13, 10, 126, 5, 99, 97, 114, 100, 115, 2, 105, 100, 28, 1, 2, 34, 3, 126, 2, 1, 46, 4, 126, 0, 198, 4, 47, 36, 56, 51, 54, 50, 49, 55, 52, 53, 45, 48, 70, 54, 54, 45, 52, 70, 52, 50, 45, 66, 69, 67, 50, 45, 57, 53, 54, 57, 55, 66, 48, 70, 66, 65, 50, 56, 56, 2, 2, 0]
        let changes: [[UInt8]] = [[133, 111, 74, 131, 106, 150, 145, 148, 1, 109, 16, 93, 68, 133, 206, 177, 170, 71, 30, 156, 158, 110, 246, 206, 101, 94, 219, 1, 1, 193, 238, 171, 132, 6, 14, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 0, 0, 13, 10, 126, 5, 99, 97, 114, 100, 115, 2, 105, 100, 28, 1, 2, 34, 3, 126, 2, 1, 46, 4, 126, 0, 198, 4, 47, 36, 56, 51, 54, 50, 49, 55, 52, 53, 45, 48, 70, 54, 54, 45, 52, 70, 52, 50, 45, 66, 69, 67, 50, 45, 57, 53, 54, 57, 55, 66, 48, 70, 66, 65, 50, 56, 56, 2, 2, 0], [133, 111, 74, 131, 197, 27, 245, 223, 1, 194, 2, 16, 93, 68, 133, 206, 177, 170, 71, 30, 156, 158, 110, 246, 206, 101, 94, 219, 2, 3, 193, 238, 171, 132, 6, 0, 0, 1, 106, 150, 145, 148, 221, 216, 115, 198, 233, 230, 123, 139, 184, 228, 154, 125, 254, 41, 155, 219, 186, 38, 29, 209, 216, 60, 136, 122, 236, 76, 132, 83, 1, 2, 17, 0, 2, 19, 126, 1, 3, 2, 4, 2, 3, 2, 8, 127, 3, 4, 11, 127, 3, 2, 16, 127, 3, 9, 14, 0, 3, 127, 0, 0, 3, 127, 0, 0, 7, 127, 0, 0, 1, 11, 19, 127, 0, 0, 1, 126, 0, 5, 0, 2, 126, 123, 9, 0, 6, 126, 119, 17, 0, 1, 13, 69, 0, 1, 127, 6, 99, 101, 110, 116, 101, 114, 0, 2, 126, 2, 105, 100, 4, 115, 105, 122, 101, 0, 2, 122, 4, 116, 105, 110, 116, 4, 98, 108, 117, 101, 5, 103, 114, 101, 101, 110, 7, 111, 112, 97, 99, 105, 116, 121, 3, 114, 101, 100, 11, 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 0, 2, 127, 1, 122, 28, 9, 0, 1, 1, 2, 2, 2, 6, 2, 1, 34, 17, 126, 0, 2, 3, 1, 127, 2, 2, 1, 127, 0, 4, 1, 127, 2, 3, 1, 46, 22, 2, 0, 2, 35, 126, 198, 4, 0, 2, 19, 127, 0, 2, 133, 1, 125, 19, 133, 1, 0, 3, 19, 47, 70, 212, 1, 227, 2, 51, 54, 56, 52, 48, 66, 50, 51, 45, 65, 52, 66, 49, 45, 52, 51, 65, 56, 45, 66, 54, 69, 68, 45, 51, 57, 70, 66, 56, 53, 49, 49, 51, 52, 66, 57, 93, 122, 192, 246, 168, 157, 155, 211, 151, 63, 36, 91, 148, 37, 159, 167, 223, 63, 1, 0, 227, 124, 137, 89, 151, 167, 63, 0, 0, 1, 56, 2, 17, 0]]
        var firstModel = Document<AMBoard>(data: data)

        XCTAssertEqual(firstModel.content.cards.count, 0)

        firstModel.apply(changes: changes)

        XCTAssertEqual(firstModel.content.cards.count, 1)
    }
}
